{
    "Directory and File Structure": {
        "directories": {
            "app": {
                "directories": {
                    "(auth)": {
                        "directories": {
                            "(signin)": {
                                "directories": {},
                                "files": [
                                    "page.tsx"
                                ]
                            }
                        },
                        "files": []
                    },
                    "api": {
                        "directories": {
                            "auth": {
                                "directories": {
                                    "[...nextauth]": {
                                        "directories": {},
                                        "files": [
                                            "route.ts"
                                        ]
                                    }
                                },
                                "files": []
                            },
                            "uploadthing": {
                                "directories": {},
                                "files": [
                                    "core.ts",
                                    "route.ts"
                                ]
                            }
                        },
                        "files": []
                    },
                    "dashboard": {
                        "directories": {
                            "kanban": {
                                "directories": {},
                                "files": [
                                    "page.tsx"
                                ]
                            },
                            "profile": {
                                "directories": {},
                                "files": [
                                    "page.tsx"
                                ]
                            },
                            "projects": {
                                "directories": {
                                    "[projectID]": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    },
                                    "new": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    }
                                },
                                "files": [
                                    "page.tsx"
                                ]
                            },
                            "user": {
                                "directories": {
                                    "[userId]": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    }
                                },
                                "files": [
                                    "page.tsx"
                                ]
                            }
                        },
                        "files": [
                            "layout.tsx",
                            "page.tsx"
                        ]
                    },
                    "projects": {
                        "directories": {
                            "[projectId]": {
                                "directories": {
                                    "build-process": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    },
                                    "code-explorer": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx",
                                            "test"
                                        ]
                                    },
                                    "code-structure": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    },
                                    "code-styles": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    },
                                    "components": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    },
                                    "general": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    },
                                    "qa": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    },
                                    "qa copy": {
                                        "directories": {},
                                        "files": [
                                            "page.tsx"
                                        ]
                                    }
                                },
                                "files": [
                                    "layout.tsx",
                                    "page.tsx"
                                ]
                            },
                            "new": {
                                "directories": {},
                                "files": [
                                    "page.tsx"
                                ]
                            }
                        },
                        "files": [
                            "layout.tsx",
                            "page.tsx"
                        ]
                    }
                },
                "files": [
                    "favicon.ico",
                    "globals.css",
                    "layout.tsx",
                    "not-found.tsx"
                ]
            },
            "components": {
                "directories": {
                    "charts": {
                        "directories": {},
                        "files": [
                            "area-graph.tsx",
                            "bar-graph.tsx",
                            "pie-graph.tsx"
                        ]
                    },
                    "forms": {
                        "directories": {
                            "user-profile-stepper": {
                                "directories": {},
                                "files": [
                                    "create-profile.tsx"
                                ]
                            }
                        },
                        "files": [
                            "employee-form.tsx",
                            "product-form.tsx",
                            "project-form.tsx",
                            "user-auth-form.tsx",
                            "user-login-form.tsx",
                            "user-register-form.tsx"
                        ]
                    },
                    "kanban": {
                        "directories": {},
                        "files": [
                            "board-column.tsx",
                            "column-action.tsx",
                            "kanban-board.tsx",
                            "new-section-dialog.tsx",
                            "new-task-dialog.tsx",
                            "task-card.tsx"
                        ]
                    },
                    "layout": {
                        "directories": {
                            "ThemeToggle": {
                                "directories": {},
                                "files": [
                                    "theme-provider.tsx",
                                    "theme-toggle.tsx"
                                ]
                            }
                        },
                        "files": [
                            "header.tsx",
                            "mobile-sidebar.tsx",
                            "page-container copy.tsx",
                            "page-container.tsx",
                            "providers.tsx",
                            "sidebar.tsx",
                            "user-nav.tsx"
                        ]
                    },
                    "modal": {
                        "directories": {},
                        "files": [
                            "alert-modal.tsx"
                        ]
                    },
                    "tables": {
                        "directories": {
                            "employee-tables": {
                                "directories": {},
                                "files": [
                                    "cell-action.tsx",
                                    "columns.tsx",
                                    "employee-table.tsx"
                                ]
                            },
                            "project-tables": {
                                "directories": {},
                                "files": [
                                    "cell-action.tsx",
                                    "client.tsx",
                                    "columns.tsx"
                                ]
                            },
                            "user-tables": {
                                "directories": {},
                                "files": [
                                    "cell-action.tsx",
                                    "client.tsx",
                                    "columns.tsx"
                                ]
                            }
                        },
                        "files": []
                    },
                    "ui": {
                        "directories": {},
                        "files": [
                            "accordion.tsx",
                            "alert-dialog.tsx",
                            "alert.tsx",
                            "avatar.tsx",
                            "badge.tsx",
                            "breadcrumb.tsx",
                            "button.tsx",
                            "calendar.tsx",
                            "card.tsx",
                            "chart.tsx",
                            "checkbox.tsx",
                            "collapsible.tsx",
                            "data-table.tsx",
                            "dialog.tsx",
                            "dropdown-menu.tsx",
                            "form.tsx",
                            "fullScreenLoader.tsx",
                            "heading.tsx",
                            "input.tsx",
                            "label.tsx",
                            "modal.tsx",
                            "popover.tsx",
                            "scroll-area.tsx",
                            "select.tsx",
                            "separator.tsx",
                            "sheet.tsx",
                            "skeleton.tsx",
                            "slider.tsx",
                            "switch.tsx",
                            "table.tsx",
                            "tabs.tsx",
                            "textarea.tsx",
                            "toast.tsx",
                            "toaster.tsx",
                            "tooltip.tsx",
                            "use-toast.ts"
                        ]
                    }
                },
                "files": [
                    "ChatModal.tsx",
                    "InputBar copy.tsx",
                    "InputBar.tsx",
                    "breadcrumbs.tsx",
                    "dashboard-nav.tsx",
                    "date-range-picker.tsx",
                    "file-upload.tsx",
                    "github-auth-button.tsx",
                    "icons.tsx",
                    "overview.tsx",
                    "recent-sales.tsx"
                ]
            },
            "constants": {
                "directories": {},
                "files": [
                    "data.ts"
                ]
            },
            "context": {
                "directories": {},
                "files": [
                    "RowDataContext.tsx"
                ]
            },
            "hooks": {
                "directories": {},
                "files": [
                    "useMultistepForm.tsx",
                    "useSidebar.tsx"
                ]
            },
            "lib": {
                "directories": {},
                "files": [
                    "form-schema.ts",
                    "store.ts",
                    "utils.ts"
                ]
            },
            "public": {
                "directories": {
                    "markdownTest": {
                        "directories": {},
                        "files": [
                            "build_and_deployment.md",
                            "code_structure.md",
                            "components_and_modules.md",
                            "general.md"
                        ]
                    }
                },
                "files": [
                    "auth.gif",
                    "loading.gif",
                    "next.svg",
                    "vercel.svg"
                ]
            },
            "server": {
                "directories": {},
                "files": [
                    "firebaseKey.json",
                    "gcloudKey.json",
                    "package-lock.json",
                    "package.json",
                    "server.js"
                ]
            },
            "types": {
                "directories": {},
                "files": [
                    "index.ts",
                    "next-auth.d.ts"
                ]
            }
        },
        "files": [
            ".eslintrc.json",
            ".gitignore",
            ".prettierrc",
            "LICENSE",
            "README.md",
            "auth.config.ts",
            "auth.ts",
            "components.json",
            "env.example.txt",
            "env.local",
            "firebaseConfig.ts",
            "middleware.ts",
            "next-env.d.ts",
            "next.config.js",
            "package-lock.json",
            "package.json",
            "postcss.config.js",
            "service-key.json",
            "storageClient.js",
            "tailwind.config.js",
            "tsconfig.json"
        ],
        "file_content": {
            ".eslintrc.json": "{\n  \"extends\": \"next/core-web-vitals\",\n  \"plugins\": [\"@typescript-eslint\"],\n  \"rules\": {\n    \"@typescript-eslint/no-unused-vars\": [\"warn\", { \"args\": \"none\" }],\n    \"import/no-unresolved\": \"error\",\n    \"import/named\": \"off\",\n    \"no-console\": \"warn\"\n  }\n}\n",
            ".gitignore": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env*.local\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n",
            ".prettierrc": "{\n  \"arrowParens\": \"always\",\n  \"bracketSpacing\": true,\n  \"semi\": true,\n  \"useTabs\": false,\n  \"trailingComma\": \"none\",\n  \"singleQuote\": true,\n  \"tabWidth\": 2,\n  \"endOfLine\": \"lf\",\n  \"plugins\": [\"prettier-plugin-tailwindcss\"]\n}\n",
            "LICENSE": "MIT License\n\nCopyright (c) 2023 Kiranism\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
            "README.md": "<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/9113740/201498864-2a900c64-d88f-4ed4-b5cf-770bcb57e1f5.png\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/9113740/201498152-b171abb8-9225-487a-821c-6ff49ee48579.png\">\n</picture>\n\n<div align=\"center\"><strong>Next.js 14 Admin Dashboard Starter Template With Shadcn-ui</strong></div>\n<div align=\"center\">Built with the Next.js App Router</div>\n<br />\n<div align=\"center\">\n<a href=\"https://next-shadcn-dashboard-starter.vercel.app\">View Demo</a>\n<span>\n</div>\n\n## Overview\n\nThis is a starter template using the following stack:\n\n- Framework - [Next.js 14](https://nextjs.org/13)\n- Language - [TypeScript](https://www.typescriptlang.org)\n- Styling - [Tailwind CSS](https://tailwindcss.com)\n- Components - [Shadcn-ui](https://ui.shadcn.com)\n- Schema Validations - [Zod](https://zod.dev)\n- State Management - [Zustand](https://zustand-demo.pmnd.rs)\n- Auth - [Auth.js](https://authjs.dev/)\n- File Uploading - [Uploadthing](https://uploadthing.com)\n- Tables - [Tanstack Tables](https://ui.shadcn.com/docs/components/data-table)\n- Forms - [React Hook Form](https://ui.shadcn.com/docs/components/form)\n- Linting - [ESLint](https://eslint.org)\n- Pre-commit Hooks - [Husky](https://typicode.github.io/husky/)\n- Formatting - [Prettier](https://prettier.io)\n\n_If you are looking for a React admin dashboard starter, here is the [repo](https://github.com/Kiranism/react-shadcn-dashboard-starter)._\n\n## Pages\n\n| Pages                                                                             | Specifications                                                                                        |\n| :-------------------------------------------------------------------------------- | :---------------------------------------------------------------------------------------------------- |\n| [Signup](https://next-shadcn-dashboard-starter.vercel.app/)                       | Authentication with **NextAuth** supports Social logins and email logins(Enter dummy email for demo). |\n| [Dashboard](https://next-shadcn-dashboard-starter.vercel.app/dashboard)           | Cards with recharts graphs for analytics.                                                             |\n| [Users](https://next-shadcn-dashboard-starter.vercel.app/dashboard/user)          | Tanstack tables with user details client side searching, pagination etc                               |\n| [Users/new](https://next-shadcn-dashboard-starter.vercel.app/dashboard/user/new)  | A User Form with Uploadthing to support file uploading with dropzone.                                 |\n| [Employee](https://next-shadcn-dashboard-starter.vercel.app/dashboard/employee)   | Tanstack tables with server side searching, pagination etc).                                          |\n| [Profile](https://next-shadcn-dashboard-starter.vercel.app/dashboard/profile)     | Mutistep dynamic forms using react-hook-form and zod for form validation.                             |\n| [Kanban Board](https://next-shadcn-dashboard-starter.vercel.app/dashboard/kanban) | A Drag n Drop task management board with dnd-kit and zustand to persist state locally.                |\n| [Not Found](https://next-shadcn-dashboard-starter.vercel.app/dashboard/notfound)  | Not Found Page Added in the root level                                                                |\n| -                                                                                 | -                                                                                                     |\n\n## Getting Started\n\nFollow these steps to clone the repository and start the development server:\n\n- `git clone https://github.com/Kiranism/next-shadcn-dashboard-starter.git`\n- `npm install`\n- Create a `.env.local` file by copying the example environment file:\n  `cp env.example.txt .env.local`\n- Add the required environment variables to the `.env.local` file.\n- `npm run dev`\n\nYou should now be able to access the application at http://localhost:3000.\n",
            "auth.config.ts": "import { NextAuthConfig } from 'next-auth';\nimport CredentialProvider from 'next-auth/providers/credentials';\nimport GithubProvider from 'next-auth/providers/github';\n\nconst authConfig = {\n  providers: [\n    GithubProvider({\n      clientId: process.env.GITHUB_ID ?? '',\n      clientSecret: process.env.GITHUB_SECRET ?? ''\n    }),\n    CredentialProvider({\n      credentials: {\n        email: {\n          type: 'email'\n        },\n        password: {\n          type: 'password'\n        }\n      },\n      async authorize(credentials, req) {\n        const user = {\n          id: '1',\n          name: 'John',\n          email: credentials?.email as string\n        };\n        if (user) {\n          // Any object returned will be saved in `user` property of the JWT\n          return user;\n        } else {\n          // If you return null then an error will be displayed advising the user to check their details.\n          return null;\n\n          // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\n        }\n      }\n    })\n  ],\n  pages: {\n    signIn: '/' //sigin page\n  }\n} satisfies NextAuthConfig;\n\nexport default authConfig;\n",
            "auth.ts": "import NextAuth from 'next-auth';\nimport authConfig from './auth.config';\n\nexport const { auth, handlers, signOut, signIn } = NextAuth(authConfig);\n",
            "components.json": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\n",
            "env.example.txt": "#Add Uploadthing secret and appId to setup fileupload https://uploadthing.com/\n\nUPLOADTHING_SECRET=\nUPLOADTHING_APP_ID=\n\n# Next auth https://next-auth.js.org/configuration/options\n# Run this command to generate a a new NEXTAUTH_SECRET\n# $ openssl rand -base64 32\n\nNEXTAUTH_URL = http://localhost:3000\nNEXTAUTH_SECRET=\n\n# Go to github and setup the oauth configuration\n# https://next-auth.js.org/providers/github#configuration\n# https://github.com/settings/developers\n\nGITHUB_ID = \nGITHUB_SECRET = \n\n\n",
            "env.local": "# Next auth https://next-auth.js.org/configuration/options\n# Run this command to generate a a new NEXTAUTH_SECRET\n# $ openssl rand -base64 32\n\nNEXTAUTH_URL = http://localhost:3000\nNEXTAUTH_SECRET= D55+G0V6iAR0kDbQCKHjmuiDY3Gu7pUwiQ4rLhlHFyY=\n\n# Go to github and setup the oauth configuration\n# https://next-auth.js.org/providers/github#configuration\n# https://github.com/settings/developers\n\nGITHUB_ID = \nGITHUB_SECRET = ",
            "firebaseConfig.ts": "// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';  // Import getAuth to initialize Firebase Auth\nimport { getFirestore } from 'firebase/firestore'; // Import getFirestore to initialize Firestore\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyCyMoyJ0S6AD0OECehcuv9S7wnG1w0vX7I',\n  authDomain: 'novacode-fd81a.firebaseapp.com',\n  databaseURL: 'https://novacode-fd81a-default-rtdb.europe-west1.firebasedatabase.app',\n  projectId: 'novacode-fd81a',\n  storageBucket: 'novacode-fd81a.appspot.com',\n  messagingSenderId: '942950112691',\n  appId: '1:942950112691:web:cb7eea1baab62b602a7fc6'\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and export it\nexport const auth = getAuth(app);\n\n// Initialize Firestore and export it\nexport const firestore = getFirestore(app);\n",
            "middleware.ts": "// Protecting routes with next-auth\n// https://next-auth.js.org/configuration/nextjs#middleware\n// https://nextjs.org/docs/app/building-your-application/routing/middleware\n\nimport NextAuth from 'next-auth';\nimport authConfig from './auth.config';\n\nconst { auth } = NextAuth(authConfig);\n\nexport default auth((req) => {\n  if (!req.auth) {\n    const url = req.url.replace(req.nextUrl.pathname, '/');\n    return Response.redirect(url);\n  }\n});\n\nexport const config = { matcher: ['/dashboard/:path*'] };\n",
            "next-env.d.ts": "/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/basic-features/typescript for more information.\n",
            "next.config.js": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  images: {\n    domains: ['utfs.io']\n  }\n};\n\nmodule.exports = nextConfig;\n",
            "package.json": "{\n  \"name\": \"nextshcdndashboardstarter\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"author\": {\n    \"name\": \"Kiran\",\n    \"url\": \"https://github.com/Kiranism\"\n  },\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"format\": \"prettier . --write\",\n    \"prepare\": \"husky\"\n  },\n  \"lint-staged\": {\n    \"**/*\": [\n      \"prettier --write --ignore-unknown\"\n    ]\n  },\n  \"dependencies\": {\n    \"@ant-design/icons\": \"^5.4.0\",\n    \"@dnd-kit/core\": \"^6.1.0\",\n    \"@dnd-kit/modifiers\": \"^7.0.0\",\n    \"@dnd-kit/sortable\": \"^8.0.0\",\n    \"@dnd-kit/utilities\": \"^3.2.2\",\n    \"@fortawesome/free-solid-svg-icons\": \"^6.6.0\",\n    \"@fortawesome/react-fontawesome\": \"^0.2.2\",\n    \"@google-cloud/storage\": \"^7.12.1\",\n    \"@hookform/resolvers\": \"^3.3.2\",\n    \"@monaco-editor/react\": \"^4.6.0\",\n    \"@radix-ui/react-accordion\": \"^1.1.2\",\n    \"@radix-ui/react-alert-dialog\": \"^1.0.5\",\n    \"@radix-ui/react-avatar\": \"^1.0.4\",\n    \"@radix-ui/react-checkbox\": \"^1.0.4\",\n    \"@radix-ui/react-collapsible\": \"^1.1.0\",\n    \"@radix-ui/react-dialog\": \"^1.0.5\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.0.5\",\n    \"@radix-ui/react-icons\": \"^1.3.0\",\n    \"@radix-ui/react-label\": \"^2.0.2\",\n    \"@radix-ui/react-popover\": \"^1.0.7\",\n    \"@radix-ui/react-scroll-area\": \"^1.0.5\",\n    \"@radix-ui/react-select\": \"^1.2.2\",\n    \"@radix-ui/react-separator\": \"^1.0.3\",\n    \"@radix-ui/react-slider\": \"^1.1.2\",\n    \"@radix-ui/react-slot\": \"^1.1.0\",\n    \"@radix-ui/react-switch\": \"^1.0.3\",\n    \"@radix-ui/react-tabs\": \"^1.0.4\",\n    \"@radix-ui/react-toast\": \"^1.1.5\",\n    \"@radix-ui/react-tooltip\": \"^1.0.7\",\n    \"@tailwindcss/typography\": \"^0.5.14\",\n    \"@tanstack/react-table\": \"^8.10.7\",\n    \"@types/node\": \"20.5.7\",\n    \"@types/react\": \"18.2.21\",\n    \"@types/react-dom\": \"18.2.7\",\n    \"@uploadthing/react\": \"^5.7.0\",\n    \"ant-design\": \"^1.0.0\",\n    \"antd\": \"^5.20.2\",\n    \"autoprefixer\": \"10.4.15\",\n    \"axios\": \"^1.7.4\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.0.0\",\n    \"date-fns\": \"^2.30.0\",\n    \"eslint\": \"8.48.0\",\n    \"eslint-config-next\": \"^14.0.1\",\n    \"firebase\": \"^10.13.0\",\n    \"lucide-react\": \"^0.291.0\",\n    \"next\": \"^14.2.3\",\n    \"next-auth\": \"^5.0.0-beta.18\",\n    \"next-mdx-remote\": \"^5.0.0\",\n    \"next-themes\": \"^0.2.1\",\n    \"nextjs-toploader\": \"^1.6.12\",\n    \"postcss\": \"8.4.28\",\n    \"react\": \"^18.2.0\",\n    \"react-accessible-treeview\": \"^2.9.1\",\n    \"react-complex-tree\": \"^2.4.5\",\n    \"react-day-picker\": \"^8.9.1\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-dropzone\": \"^14.2.3\",\n    \"react-hook-form\": \"^7.47.0\",\n    \"react-icons\": \"^5.3.0\",\n    \"react-markdown\": \"^9.0.1\",\n    \"react-toastify\": \"^10.0.5\",\n    \"recharts\": \"^2.12.7\",\n    \"remark\": \"^15.0.1\",\n    \"remark-gfm\": \"^4.0.0\",\n    \"remark-html\": \"^16.0.1\",\n    \"sharp\": \"^0.32.5\",\n    \"tailwind-merge\": \"^1.14.0\",\n    \"tailwindcss\": \"^3.4.0\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"typescript\": \"5.2.2\",\n    \"uploadthing\": \"^5.7.4\",\n    \"uuid\": \"^9.0.1\",\n    \"zod\": \"^3.22.4\",\n    \"zustand\": \"^4.4.6\"\n  },\n  \"devDependencies\": {\n    \"@types/uuid\": \"^9.0.7\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.11.0\",\n    \"husky\": \"^9.0.11\",\n    \"lint-staged\": \"^15.2.7\",\n    \"prettier\": \"3.0.3\",\n    \"prettier-plugin-tailwindcss\": \"^0.5.14\"\n  }\n}\n",
            "postcss.config.js": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {}\n  }\n};\n",
            "service-key.json": "{\n    \"type\": \"service_account\",\n    \"project_id\": \"novacode-432817\",\n    \"private_key_id\": \"84692d8dfa206a3be1b851448351b17f92a89df6\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCV+jWBuVdDaQFU\\nHDPYyvsAc6jpPvOei8R2jRyY1KLWlvtub544bUCHyqGFelysYjJIZDD6sUVknrGi\\nA4wnQ1hw3R0SwnB0WNxd6so+sZ0Qjf/xLqKuir9mF7fWo7HJ2cll1KE/LuVIXL3c\\n+gc0nF52cmR8h1bQq13zO39ijkdbKTzOE4XhRTkOj0fxbPAydkYN0pKqlpY55PcV\\ngWDY6zUFdsdXXr3uNGWWtChP+eS3KfMJNPBbpB7FKaLRDWAZITA36qDFey5hVZEG\\nqJRNn5G4P5FQQB720wlyvg7TjGidVf/LmH2bsimXZUMSoTrBAwHiSsfjBM80aviz\\nuMySkVQtAgMBAAECggEAERqR05OBgiyNfDwjJYwwh+Ko1sDZI7Go3CRHqJ5HW9Wo\\nIvYTwzeibloLhZ9oxjgEqADVHSHuWgVHGMTyzN9/TI/K6wLFtF8V8pf+LJww31xy\\nXd0FrIYiQdBepNnSQsTVlQlkwkHk4BXDiVnyTGuw0i1FjHYazn1cn4qfgmvbc2fZ\\nvUHcXoqlQVNaT50UZePbjNRcOzuF7CCv9Kh2yHpbumSE3D9P7rnSnJpQLmmvFXpR\\nI92M/s1yJZEhkfZXSJhfE7s3N8mcr/mqTfRsyk4pD+UFdJD+Lps9K2bWUgYZMV3m\\nq5kzPFeuOQB9lNhw/kFepYI2Fptv/ugjRSm+xzr6eQKBgQDR0mKH2EhQdxb+YEF2\\nvur9CkYadT0yziwopI5j9ICTEetlX9+f/JgF4tdi2TE5O+AxvpvcoO+nM4YK4AEf\\nVBkOPpnpwRXYTVRUNwCQy1HyzmqF4h0lsQ4QF9IAA+ApSb6QgO0NLy1SIAsUKZKV\\nDvq/FgFV13IP10ij+KdZ20oPIwKBgQC2/B24oGp0IrfNnCa/StgHbo4lVRMzV8Qs\\n3MKkoGvbz8ber8RMzKCBvA0bwR2QUGzO2VZBi+bI/FMhdeFlLoo7ulmWgwgV+O8B\\nf+R6M6C86pU4lqz747D6f29AuKQfSO+ZKjQCAske9g9+Zd75UKzp/I2Nazik10W9\\n1w0z7sZsbwKBgQC2krxNvDLgYV/OpG8SJnpPCFuLtiw0QxZFnzqPWzdtwY/0vAHY\\nMnEN3h7Q0nB0ftdMMbFpv1gJQ1oFqHkRi5npvSssLWkWt+MDDIEffOunvVkPensm\\nSvQTqMaAYN7yzkpVbvnWGRD0fxFkz+/OaCRjlYA/86I6ineYxkrIc3nzxQKBgCGQ\\nSw9TdVNKDvbK3pyV6NwsHiyg1z3CqnwkHhu+RSpziSHNka8YlZRWXv0pRffzmJG0\\nccriE3noNoNbsPUzPS3Jd6dQ74nAOG7I+6qij6g3SxmvIZmuYQcBmvF/LLOEWFZ6\\n1EFOK3/fWGYx311Ru/XLWleHREOQLP2uVYCiGolHAoGABJ8PezveEDGa0NReT9mE\\nxUcguM5OH70mX8saLwUPSwtI+a4pGD6b/SmwjUOMM+bjf2A00YoLPU5kHXjXtyxJ\\njxv6u1bVDl5UYm35wIQFx7kfQioOlp5Z1U/AzRjcfiq8o9/qjX866vgzzSnaraJf\\nQnbVnu9DzeMhN2gnGND7CCg=\\n-----END PRIVATE KEY-----\\n\",\n    \"client_email\": \"novacode@novacode-432817.iam.gserviceaccount.com\",\n    \"client_id\": \"112475073990952788593\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/novacode%40novacode-432817.iam.gserviceaccount.com\",\n    \"universe_domain\": \"googleapis.com\"\n  }",
            "storageClient.js": "// storageClient.ts\nimport { Storage } from '@google-cloud/storage';\nimport path from 'path';\n\n// Path to your service account key file\nconst keyFilename = path.join(__dirname, 'service-key.json');\n\nconst storage = new Storage({ keyFilename });\n\n// Replace 'your-bucket-name' with your actual bucket name\nconst bucket = storage.bucket('novacode');\n\nexport { bucket };\n",
            "tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './constants/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}'\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px'\n      }\n    },\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))'\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))'\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))'\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))'\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))'\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))'\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))'\n        }\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)'\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' }\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 }\n        }\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out'\n      }\n    }\n  },\n  plugins: [\n    require('@tailwindcss/typography'),\n    require('tailwindcss-animate')\n  ]\n};\n",
            "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n",
            "app\\globals.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 20 66% 99%;\n    --foreground: 20 51% 4%;\n    --muted: 20 25% 86%;\n    --muted-foreground: 20 7% 25%;\n    --popover: 20 66% 98%;\n    --popover-foreground: 20 51% 3%;\n    --card: 20 66% 98%;\n    --card-foreground: 20 51% 3%;\n    --border: 20 15% 94%;\n    --input: 20 15% 94%;\n    --primary: 20 48% 72%;\n    --primary-foreground: 20 48% 12%;\n    --secondary: 20 12% 92%;\n    --secondary-foreground: 20 12% 32%;\n    --accent: 20 12% 92%;\n    --accent-foreground: 20 12% 32%;\n    --destructive: 11 80% 22%;\n    --destructive-foreground: 11 80% 82%;\n    --ring: 20 48% 72%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --background: 253 43% 3%;\n    --foreground: 253 31% 98%;\n    --muted: 253 7% 13%;\n    --muted-foreground: 253 13% 63%;\n    --popover: 253 43% 3%;\n    --popover-foreground: 253 31% 98%;\n    --card: 253 43% 4%;\n    --card-foreground: 253 31% 99%;\n    --border: 215 27.9% 16.9%;\n    --input: 215 27.9% 16.9%;\n    --primary: 253 91% 58%;\n    --primary-foreground: 253 91% 98%;\n    --secondary: 253 7% 9%;\n    --secondary-foreground: 253 7% 69%;\n    --accent: 253 13% 14%;\n    --accent-foreground: 253 13% 74%;\n    --destructive: 339.2 90.36% 51.18%;\n    --destructive-foreground: 0 0% 100%;\n    --ring: 253 91% 58%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply box-border bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .min-h-screen {\n    min-height: 100vh; /* Fallback */\n    min-height: 100dvh;\n  }\n  .h-screen {\n    height: 100vh; /* Fallback */\n    height: 100dvh;\n  }\n}\n",
            "app\\layout.tsx": "import Providers from '@/components/layout/providers';\nimport { Toaster } from '@/components/ui/toaster';\nimport '@uploadthing/react/styles.css';\nimport type { Metadata } from 'next';\nimport NextTopLoader from 'nextjs-toploader';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\nimport { auth } from '@/auth';\nimport { RowDataProvider } from '@/context/rowDataContext';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Novacode',\n  description: 'AI Onboarding for Software Developers'\n};\n\nexport default async function RootLayout({\n  children\n}: {\n  children: React.ReactNode;\n}) {\n  const session = await auth();\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${inter.className} overflow-hidden `}\n        suppressHydrationWarning={true}\n      >\n        <NextTopLoader showSpinner={false} />\n        <Providers session={session}>\n          <RowDataProvider> {/* Wrap the children with RowDataProvider */}\n            <Toaster />\n            {children}\n          </RowDataProvider>\n        </Providers>\n      </body>\n    </html>\n  );\n}",
            "app\\not-found.tsx": "'use client';\n\nimport { useRouter } from 'next/navigation';\n\nimport { Button } from '@/components/ui/button';\n\nexport default function NotFound() {\n  const router = useRouter();\n\n  return (\n    <div className=\"absolute left-1/2 top-1/2 mb-16 -translate-x-1/2 -translate-y-1/2 items-center justify-center text-center\">\n      <span className=\"bg-gradient-to-b from-foreground to-transparent bg-clip-text text-[10rem] font-extrabold leading-none text-transparent\">\n        404\n      </span>\n      <h2 className=\"font-heading my-2 text-2xl font-bold\">\n        Something&apos;s missing\n      </h2>\n      <p>\n        Sorry, the page you are looking for doesn&apos;t exist or has been\n        moved.\n      </p>\n      <div className=\"mt-8 flex justify-center gap-2\">\n        <Button onClick={() => router.back()} variant=\"default\" size=\"lg\">\n          Go back\n        </Button>\n        <Button\n          onClick={() => router.push('/dashboard')}\n          variant=\"ghost\"\n          size=\"lg\"\n        >\n          Back to Home\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
            "app\\(auth)\\(signin)\\page.tsx": "'use client';\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport UserAuthForm from '@/components/forms/user-auth-form';\nimport { buttonVariants } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\nexport default function AuthenticationPage() {\n  const [showRegisterForm, setShowRegisterForm] = useState(false);\n\n  return (\n    <div className=\"relative h-screen flex-col items-center justify-center md:grid lg:max-w-none lg:grid-cols-2 lg:px-0\">\n      <Link\n        href=\"/examples/authentication\"\n        className={cn(\n          buttonVariants({ variant: 'ghost' }),\n          'absolute right-4 top-4 hidden md:right-8 md:top-8'\n        )}\n      >\n        Login\n      </Link>\n      <div className=\"relative hidden h-full flex-col bg-muted p-10 text-white lg:flex dark:border-r\">\n        <div className=\"absolute inset-0 bg-zinc-900\" />\n        <div className=\"relative z-20 flex items-center text-lg font-medium\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"mr-2 h-6 w-6\"\n          >\n            <path d=\"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3\" />\n          </svg>\n          NovaCode\n        </div>\n        {/* Display local GIF here */}\n        <div className=\"relative z-20 mt-6 flex justify-center\">\n          <img\n            src=\"/auth.gif\"\n            alt=\"Animated GIF\"\n            width=\"480\"\n            height=\"480\"\n          />\n        </div>\n        <div className=\"relative z-20 mt-auto\">\n          <blockquote className=\"space-y-2\">\n            <p className=\"text-lg\">\n              Accelerate developer onboarding with AI-powered\n              insights\u2014boost productivity from day one by turning code into\n              clarity.\n            </p>\n          </blockquote>\n        </div>\n      </div>\n      <div className=\"flex h-full items-center p-4 lg:p-8\">\n        <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n          <div className=\"flex flex-col space-y-2 text-center\">\n            <h1 className=\"text-2xl font-semibold tracking-tight\">\n              {showRegisterForm ? 'Register' : 'Login'}\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">\n              {showRegisterForm\n                ? 'Enter your details below to create your account'\n                : 'Enter your credentials to log in to your account'}\n            </p>\n          </div>\n          <UserAuthForm onFormChange={setShowRegisterForm} />\n          <p className=\"px-8 text-center text-sm text-muted-foreground\">\n            By clicking continue, you agree to our{' '}\n            <Link\n              href=\"/terms\"\n              className=\"underline underline-offset-4 hover:text-primary\"\n            >\n              Terms of Service\n            </Link>{' '}\n            and{' '}\n            <Link\n              href=\"/privacy\"\n              className=\"underline underline-offset-4 hover:text-primary\"\n            >\n              Privacy Policy\n            </Link>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
            "app\\api\\auth\\[...nextauth]\\route.ts": "import { handlers } from '@/auth';\nexport const { GET, POST } = handlers;\n",
            "app\\api\\uploadthing\\core.ts": "import { createUploadthing, type FileRouter } from 'uploadthing/next';\n\nconst f = createUploadthing();\n\nconst auth = () => ({ id: 'fakeId' }); // Fake auth function\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const ourFileRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({ image: { maxFileSize: '4MB', maxFileCount: 3 } })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({}) => {\n      // This code runs on your server before upload\n      const user = await auth();\n\n      // If you throw, the user will not be able to upload\n      if (!user) throw new Error('Unauthorized');\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id };\n    })\n    .onUploadComplete(async () => {\n      // This code RUNS ON YOUR SERVER after upload\n    })\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n",
            "app\\api\\uploadthing\\route.ts": "import { createNextRouteHandler } from 'uploadthing/next';\n\nimport { ourFileRouter } from './core';\n\n// Export routes for Next App Router\nexport const { GET, POST } = createNextRouteHandler({\n  router: ourFileRouter\n});\n",
            "app\\dashboard\\layout.tsx": "import Header from '@/components/layout/header';\nimport Sidebar from '@/components/layout/sidebar';\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'NovaCode',\n  description: 'AI Onboarding for Software Developers'\n};\n\nexport default function DashboardLayout({\n  children\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <div className=\"flex\">\n      <Sidebar />\n      <main className=\"w-full flex-1 overflow-hidden\">\n        <Header />\n        {children}\n      </main>\n    </div>\n  );\n}\n",
            "app\\dashboard\\page.tsx": "import { AreaGraph } from '@/components/charts/area-graph';\nimport { BarGraph } from '@/components/charts/bar-graph';\nimport { PieGraph } from '@/components/charts/pie-graph';\nimport { CalendarDateRangePicker } from '@/components/date-range-picker';\nimport PageContainer from '@/components/layout/page-container';\nimport { RecentSales } from '@/components/recent-sales';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle\n} from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nexport default function page() {\n  return (\n    <PageContainer scrollable={true}>\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between space-y-2\">\n          <h2 className=\"text-2xl font-bold tracking-tight\">\n            Hi, Welcome back \ud83d\udc4b\n          </h2>\n          <div className=\"hidden items-center space-x-2 md:flex\">\n            <CalendarDateRangePicker />\n            <Button>Download</Button>\n          </div>\n        </div>\n        <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"analytics\" disabled>\n              Analytics\n            </TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    Total Revenue\n                  </CardTitle>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    className=\"h-4 w-4 text-muted-foreground\"\n                  >\n                    <path d=\"M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\" />\n                  </svg>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">$45,231.89</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +20.1% from last month\n                  </p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    Subscriptions\n                  </CardTitle>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    className=\"h-4 w-4 text-muted-foreground\"\n                  >\n                    <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\" />\n                    <circle cx=\"9\" cy=\"7\" r=\"4\" />\n                    <path d=\"M22 21v-2a4 4 0 0 0-3-3.87M16 3.13a4 4 0 0 1 0 7.75\" />\n                  </svg>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">+2350</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +180.1% from last month\n                  </p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Sales</CardTitle>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    className=\"h-4 w-4 text-muted-foreground\"\n                  >\n                    <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n                    <path d=\"M2 10h20\" />\n                  </svg>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">+12,234</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +19% from last month\n                  </p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    Active Now\n                  </CardTitle>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    className=\"h-4 w-4 text-muted-foreground\"\n                  >\n                    <path d=\"M22 12h-4l-3 9L9 3l-3 9H2\" />\n                  </svg>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">+573</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +201 since last hour\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-7\">\n              <div className=\"col-span-4\">\n                <BarGraph />\n              </div>\n              <Card className=\"col-span-4 md:col-span-3\">\n                <CardHeader>\n                  <CardTitle>Recent Sales</CardTitle>\n                  <CardDescription>\n                    You made 265 sales this month.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <RecentSales />\n                </CardContent>\n              </Card>\n              <div className=\"col-span-4\">\n                <AreaGraph />\n              </div>\n              <div className=\"col-span-4 md:col-span-3\">\n                <PieGraph />\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </PageContainer>\n  );\n}\n",
            "app\\dashboard\\kanban\\page.tsx": "import { Breadcrumbs } from '@/components/breadcrumbs';\nimport { KanbanBoard } from '@/components/kanban/kanban-board';\nimport NewTaskDialog from '@/components/kanban/new-task-dialog';\nimport PageContainer from '@/components/layout/page-container';\nimport { Heading } from '@/components/ui/heading';\n\nconst breadcrumbItems = [\n  { title: 'Dashboard', link: '/dashboard' },\n  { title: 'Kanban', link: '/dashboard/kanban' }\n];\n\nexport default function page() {\n  return (\n    <PageContainer>\n      <div className=\"space-y-4\">\n        <Breadcrumbs items={breadcrumbItems} />\n        <div className=\"flex items-start justify-between\">\n          <Heading title={`Kanban`} description=\"Manage tasks by dnd\" />\n          <NewTaskDialog />\n        </div>\n        <KanbanBoard />\n      </div>\n    </PageContainer>\n  );\n}\n",
            "app\\dashboard\\profile\\page.tsx": "import { Breadcrumbs } from '@/components/breadcrumbs';\nimport { CreateProfileOne } from '@/components/forms/user-profile-stepper/create-profile';\nimport PageContainer from '@/components/layout/page-container';\n\nconst breadcrumbItems = [\n  { title: 'Dashboard', link: '/dashboard' },\n  { title: 'Profile', link: '/dashboard/profile' }\n];\nexport default function page() {\n  return (\n    <PageContainer scrollable={true}>\n      <div className=\"space-y-4\">\n        <Breadcrumbs items={breadcrumbItems} />\n        <CreateProfileOne categories={[]} initialData={null} />\n      </div>\n    </PageContainer>\n  );\n}\n",
            "app\\dashboard\\projects\\page.tsx": "\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { Breadcrumbs } from '@/components/breadcrumbs';\nimport PageContainer from '@/components/layout/page-container';\nimport { ProjectClient } from '@/components/tables/project-tables/client';\nimport { firestore } from \"../../../firebaseConfig\"\nimport { Project } from '@/constants/data';\n\nconst breadcrumbItems = [\n  { title: 'Dashboard', link: '/dashboard' },\n  { title: 'Projects', link: '/dashboard/projects' }\n];\n\nexport default function Page() {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(firestore, 'projects'));\n        const projectsData: Project[] = querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as Project[];\n        setProjects(projectsData);\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProjects();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <PageContainer>\n      <div className=\"space-y-2\">\n        <Breadcrumbs items={breadcrumbItems} />\n        <ProjectClient data={projects} />\n      </div>\n    </PageContainer>\n  );\n}\n",
            "app\\dashboard\\projects\\[projectID]\\page.tsx": "'use client';\n\nimport PageContainer from '@/components/layout/page-container';\nimport { useRouter, usePathname } from 'next/navigation';\nimport React, { useEffect, useState } from 'react';\nimport { firestore } from '@/firebaseConfig';\nimport { doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\n\nexport default function ProjectPage() {\n  const pathname = usePathname(); // Use usePathname to get the current path\n  const router = useRouter();\n  const [rowData, setRowData] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const projectId = pathname?.split('/').pop(); // Extract project ID from URL\n      if (projectId) {\n        try {\n          const docRef = doc(firestore, 'projects', projectId);\n          const docSnap = await getDoc(docRef);\n\n          if (docSnap.exists()) {\n            setRowData(docSnap.data());\n          } else {\n            setError('No such document!');\n          }\n        } catch (error) {\n          console.error('Error fetching project data:', error);\n          setError('Failed to fetch project data.');\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        setError('Invalid project ID.');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [pathname]); // Use pathname as a dependency\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p className=\"text-red-500\">{error}</p>;\n\n  return (\n    <PageContainer scrollable={true}>\n      <div className=\"space-y-4\">\n        <h1>Project Details</h1>\n        <pre>{JSON.stringify(rowData, null, 2)}</pre>\n        {/* Render your project details based on rowData */}\n      </div>\n    </PageContainer>\n  );\n}\n",
            "app\\dashboard\\projects\\new\\page.tsx": "import { Breadcrumbs } from '@/components/breadcrumbs';\nimport { ProjectForm } from '@/components/forms/project-form';\nimport PageContainer from '@/components/layout/page-container';\nimport React from 'react';\n\nconst breadcrumbItems = [\n  { title: 'Dashboard', link: '/dashboard' },\n  { title: 'Projects', link: '/dashboard/projects' },\n  { title: 'Create', link: '/dashboard/projects/create' }\n];\nexport default function Page() {\n  return (\n    <PageContainer scrollable={true}>\n      <div className=\"space-y-4\">\n        <Breadcrumbs items={breadcrumbItems} />\n        <ProjectForm\n          initialData={null}\n          key={null}\n        />\n      </div>\n    </PageContainer>\n  );\n}\n",
            "app\\dashboard\\user\\page.tsx": "import { Breadcrumbs } from '@/components/breadcrumbs';\nimport PageContainer from '@/components/layout/page-container';\nimport { UserClient } from '@/components/tables/user-tables/client';\nimport { users } from '@/constants/data';\n\nconst breadcrumbItems = [\n  { title: 'Dashboard', link: '/dashboard' },\n  { title: 'User', link: '/dashboard/user' }\n];\nexport default function page() {\n  return (\n    <PageContainer>\n      <div className=\"space-y-2\">\n        <Breadcrumbs items={breadcrumbItems} />\n        <UserClient data={users} />\n      </div>\n    </PageContainer>\n  );\n}\n",
            "app\\dashboard\\user\\[userId]\\page.tsx": "import { Breadcrumbs } from '@/components/breadcrumbs';\nimport { ProductForm } from '@/components/forms/product-form';\nimport PageContainer from '@/components/layout/page-container';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport React from 'react';\n\nconst breadcrumbItems = [\n  { title: 'Dashboard', link: '/dashboard' },\n  { title: 'User', link: '/dashboard/user' },\n  { title: 'Create', link: '/dashboard/user/create' }\n];\nexport default function Page() {\n  return (\n    <PageContainer scrollable={true}>\n      <div className=\"space-y-4\">\n        <Breadcrumbs items={breadcrumbItems} />\n        <ProductForm\n          categories={[\n            { _id: 'shirts', name: 'shirts' },\n            { _id: 'pants', name: 'pants' }\n          ]}\n          initialData={null}\n          key={null}\n        />\n      </div>\n    </PageContainer>\n  );\n}\n",
            "app\\projects\\layout.tsx": "// layout.tsx\nimport Header from '@/components/layout/header';\nimport Sidebar from '@/components/layout/sidebar';\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'NovaCode',\n  description: 'AI Onboarding for Software Developers'\n};\n\nexport default function DashboardLayout({\n  children\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header />\n        {children}\n      </main>\n    </div>\n  );\n}",
            "app\\projects\\page.tsx": "\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { collection, getDocs } from 'firebase/firestore';\nimport PageContainer from '@/components/layout/page-container';\nimport { ProjectClient } from '@/components/tables/project-tables/client';\nimport { firestore } from '@/firebaseConfig';\nimport { Project } from '@/constants/data';\n\nexport default function Page() {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(firestore, 'projects'));\n        const projectsData: Project[] = querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as Project[];\n        setProjects(projectsData);\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProjects();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <PageContainer>\n      <div className=\"space-y-2\">\n\n        <ProjectClient data={projects} />\n      </div>\n    </PageContainer>\n  );\n}\n",
            "app\\projects\\[projectId]\\layout.tsx": "'use client';\n\nimport React, { useState } from 'react';\nimport { MessageCircle } from 'lucide-react'; // Importing the MessageCircle icon\nimport { useTheme } from 'next-themes'; // Assuming you're using next-themes for theme management\nimport ChatModal from '@/components/ChatModal';\n\nconst Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { theme } = useTheme(); // Get the current theme (dark or light)\n  const [isChatOpen, setIsChatOpen] = useState(false); // State to manage modal visibility\n\n  const openChat = () => setIsChatOpen(true);\n  const closeChat = () => setIsChatOpen(false);\n\n  return (\n    <div className=\"relative min-h-screen\">\n      <main>{children}</main>\n      {/* Fixed Icon */}\n      <div className=\"fixed bottom-8 right-8\">\n        <button\n          aria-label=\"Message\"\n          className=\"p-3 rounded-full focus:outline-none\"\n          style={{\n            backgroundColor: 'transparent', // Fully transparent background\n            color: theme === 'dark' ? '#ffffff' : '#000000', // Icon color based on theme\n            border: `2px solid ${theme === 'dark' ? '#ffffff' : '#000000'}` // Border color based on theme\n          }}\n          onClick={openChat}\n        >\n          <MessageCircle size={32} /> {/* Use the MessageCircle icon */}\n        </button>\n      </div>\n\n      {/* Chat Modal */}\n      <ChatModal isOpen={isChatOpen} onClose={closeChat} />\n    </div>\n  );\n};\n\nexport default Layout;\n",
            "app\\projects\\[projectId]\\page.tsx": "'use client';\n\nimport { useRowData } from '@/context/rowDataContext';\nimport PageContainer from '@/components/layout/page-container';\nimport { useRouter, usePathname } from 'next/navigation';\nimport React, { useEffect, useState } from 'react';\nimport { firestore } from '@/firebaseConfig';\nimport { doc, getDoc } from 'firebase/firestore';\nimport Layout from './layout';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\nexport default function ProjectPage() {\n  const pathname = usePathname();\n  const router = useRouter();\n  const { rowData, setRowData } = useRowData();\n  const [loading, setLoading] = useState(!rowData);\n  const [error, setError] = useState<string | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (rowData) {\n        setLoading(false);\n        return;\n      }\n\n      const projectId = pathname?.split('/').pop();\n      if (projectId) {\n        try {\n          const docRef = doc(firestore, 'projects', projectId);\n          const docSnap = await getDoc(docRef);\n\n          if (docSnap.exists()) {\n            const data = docSnap.data();\n            setRowData(data);\n\n            // Fetch the file content\n            const response = await fetch(`http://localhost:4000/file/${projectId}/general.md`);\n            if (response.ok) {\n              const content = await response.text();\n              setFileContent(content);\n            } else {\n              setError('Failed to fetch file content.');\n            }\n          } else {\n            setError('No such document!');\n          }\n        } catch (error) {\n          console.error('Error fetching project data:', error);\n          setError('Failed to fetch project data.');\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        setError('Invalid project ID.');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [pathname, rowData, setRowData]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p className=\"text-red-500\">{error}</p>;\n\n  return (\n    <Layout>\n      <PageContainer scrollable={true}>\n        <div className=\"space-y-4\">\n          <h1 className=\"text-2xl font-bold\">Project Details</h1>\n          <pre className=\"bg-gray-100 p-4 rounded-md shadow-md\">\n            {JSON.stringify(rowData, null, 2)}\n          </pre>\n          {fileContent && (\n            <div className=\"prose max-w-none\">\n              <h2 className=\"text-xl font-semibold\">File Content</h2>\n              <ReactMarkdown remarkPlugins={[remarkGfm]}>{fileContent}</ReactMarkdown>\n            </div>\n          )}\n        </div>\n      </PageContainer>\n    </Layout>\n  );\n}\n",
            "app\\projects\\[projectId]\\build-process\\page.tsx": "'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport PageContainer from '@/components/layout/page-container';\nimport { useRowData } from '@/context/rowDataContext';\nimport { MDXRemote } from 'next-mdx-remote';\nimport { serialize } from 'next-mdx-remote/serialize';\n\nconst BuildPage = () => {\n  const { rowData } = useRowData();\n  const [serializedContent, setSerializedContent] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchFileContent = async () => {\n      if (rowData) {\n        const projectId = rowData.id;\n        const filename = 'build_and_deployment.md';\n\n        try {\n          const response = await fetch(`http://localhost:4000/file/${projectId}/${filename}`);\n          if (response.ok) {\n            const content = await response.text();\n            const serialized = await serialize(content);\n            setSerializedContent(serialized);\n          } else {\n            setError('Failed to fetch file content.');\n          }\n        } catch (err) {\n          console.error('Error fetching file content:', err);\n          setError('Failed to fetch file content.');\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchFileContent();\n  }, [rowData]);\n\n  if (!rowData) {\n    return (\n      <PageContainer scrollable>\n        <p className=\"dark:text-gray-300\">Loading Build Tutorial...</p>\n      </PageContainer>\n    );\n  }\n\n  if (loading) return <p className=\"dark:text-gray-300\">Loading file content...</p>;\n  if (error) return <p className=\"text-red-500 dark:text-red-400\">{error}</p>;\n\n  return (\n    <PageContainer scrollable>\n      {serializedContent && (\n        <div className=\"prose prose-sm \n                        dark:prose-invert \n                        prose-headings:dark:text-gray-200\n                        prose-p:dark:text-gray-300\n                        prose-a:dark:text-blue-400\n                        prose-strong:dark:text-gray-200\n                        prose-code:dark:text-gray-200\n                        prose-pre:dark:bg-gray-800\n                        prose-blockquote:dark:text-gray-300\n                        prose-li:dark:text-gray-300\n                        max-w-none\">\n          <MDXRemote {...serializedContent} />\n        </div>\n      )}\n    </PageContainer>\n  );\n};\n\nexport default BuildPage;",
            "app\\projects\\[projectId]\\code-explorer\\page.tsx": "'use client';\nimport React, { useState } from 'react';\nimport Editor from '@monaco-editor/react';\nimport { UncontrolledTreeEnvironment, Tree, StaticTreeDataProvider, TreeItem, TreeItemIndex } from 'react-complex-tree';\nimport 'react-complex-tree/lib/style-modern.css';\n\ninterface FileContents {\n  [key: string]: string;\n}\n\ninterface CustomTreeItem extends TreeItem {\n  data: string;\n}\n\nconst CodeExplorer: React.FC = () => {\n  const [code, setCode] = useState<string>('// Select a file to view its content');\n  const [isSidebarOpen, setSidebarOpen] = useState<boolean>(true);\n\n  const fileContents: FileContents = {\n    indexHtml: `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Simple HTML Project</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <p>This is a simple HTML and CSS example.</p>\n</body>\n</html>`,\n    \n    stylesCss: `body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\nh1 {\n    color: #007BFF;\n    text-align: center;\n}\n\np {\n    text-align: center;\n    font-size: 18px;\n}`,\n\n    readmeMd: `# Simple HTML Project\n\nThis project demonstrates a basic HTML structure with an external CSS file. The HTML file includes a heading and a paragraph styled with CSS.\n\n## Files\n\n- **index.html**: The main HTML file.\n- **styles.css**: The CSS file for styling the HTML content.\n\nTo view the project, open the \\`index.html\\` file in a web browser.`,\n};\n\nconst items: Record<TreeItemIndex, CustomTreeItem> = {\n    root: {\n        index: 'root',\n        isFolder: true,\n        children: ['indexHtml', 'stylesCss', 'readmeMd'],\n        data: 'Root item',\n    },\n    indexHtml: {\n        index: 'indexHtml',\n        children: [],\n        data: 'indexHtml',\n    },\n    stylesCss: {\n        index: 'stylesCss',\n        children: [],\n        data: 'stylesCss',\n    },\n    readmeMd: {\n        index: 'readmeMd',\n        children: [],\n        data: 'readmeMd',\n    },\n};\n\n  const dataProvider = new StaticTreeDataProvider(items, (item: CustomTreeItem, newName: string) => ({ ...item, data: newName }));\n\n  const handleCodeChange = (value: string | undefined) => {\n    if (value !== undefined) {\n      setCode(value);\n    }\n  };\n\n  // Adjusted signature for handleItemClick to match the expected type\n  const handleItemClick = (item: TreeItem<CustomTreeItem>, treeId: string) => {\n    console.log('Item clicked:', item); // Log the item\n    if (!item.isFolder && typeof item.index === 'string' && fileContents[item.index]) {\n      setCode(fileContents[item.index]);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <div className={`flex-1 ml-${isSidebarOpen ? '80' : '0'} transition-all duration-300`}>\n        <div className=\"flex flex-col md:flex-row gap-4 p-4\">\n          <div className=\"p-4 bg-white rounded-lg shadow-lg w-full md:w-80\">\n            <h2 className=\"text-lg md:text-xl font-semibold mb-4\">File Explorer</h2>\n            <UncontrolledTreeEnvironment<CustomTreeItem>\n              dataProvider={dataProvider}\n              getItemTitle={(item: CustomTreeItem) => item.data}\n              viewState={{}}\n              onPrimaryAction={(item, treeId) => handleItemClick(item, treeId)} // Ensure correct signature\n            >\n              <Tree treeId=\"tree-1\" rootItem=\"root\" treeLabel=\"Tree Example\" />\n            </UncontrolledTreeEnvironment>\n          </div>\n          <div className=\"flex-1 p-4 bg-white rounded-lg shadow-lg\">\n            <h2 className=\"text-lg md:text-xl font-semibold mb-4\">Code Editor</h2>\n            <div className=\"w-full h-[400px] md:h-[500px]\">\n              <Editor\n                height=\"100%\"\n                defaultLanguage=\"javascript\"\n                value={code}\n                onChange={handleCodeChange}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CodeExplorer;\n",
            "app\\projects\\[projectId]\\code-explorer\\test": "",
            "app\\projects\\[projectId]\\code-structure\\page.tsx": "'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport PageContainer from '@/components/layout/page-container';\nimport { useRowData } from '@/context/rowDataContext';\nimport { MDXRemote } from 'next-mdx-remote';\nimport { serialize } from 'next-mdx-remote/serialize';\n\nconst CodeStructurePage = () => {\n  const { rowData } = useRowData();\n  const [serializedContent, setSerializedContent] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchFileContent = async () => {\n      if (rowData) {\n        const projectId = rowData.id;\n        const filename = 'code_structure.md';\n\n        try {\n          const response = await fetch(`http://localhost:4000/file/${projectId}/${filename}`);\n          if (response.ok) {\n            const content = await response.text();\n            const serialized = await serialize(content);\n            setSerializedContent(serialized);\n          } else {\n            setError('Failed to fetch file content.');\n          }\n        } catch (err) {\n          console.error('Error fetching file content:', err);\n          setError('Failed to fetch file content.');\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchFileContent();\n  }, [rowData]);\n\n  if (!rowData) {\n    return (\n      <PageContainer scrollable>\n        <p className=\"dark:text-gray-300\">Loading Code Structure...</p>\n      </PageContainer>\n    );\n  }\n\n  if (loading) return <p className=\"dark:text-gray-300\">Loading file content...</p>;\n  if (error) return <p className=\"text-red-500 dark:text-red-400\">{error}</p>;\n\n  return (\n    <PageContainer scrollable>\n      {serializedContent && (\n        <div className=\"prose prose-sm \n                        dark:prose-invert \n                        prose-headings:dark:text-gray-200\n                        prose-p:dark:text-gray-300\n                        prose-a:dark:text-blue-400\n                        prose-strong:dark:text-gray-200\n                        prose-code:dark:text-gray-200\n                        prose-pre:dark:bg-gray-800\n                        prose-blockquote:dark:text-gray-300\n                        prose-li:dark:text-gray-300\n                        max-w-none\">\n          <MDXRemote {...serializedContent} />\n        </div>\n      )}\n    </PageContainer>\n  );\n};\n\nexport default CodeStructurePage;\n",
            "app\\projects\\[projectId]\\code-styles\\page.tsx": "// app/projects/[projectId]/general/page.tsx\nimport React from 'react';\nimport PageContainer from '@/components/layout/page-container';\n\nconst GeneralInformationPage = () => {\n  return (\n    <PageContainer>\n      <h1>General Information</h1>\n      <p>Details about the Code Styles for the project will go here.</p>\n    </PageContainer>\n  );\n};\n\nexport default GeneralInformationPage;\n",
            "app\\projects\\[projectId]\\components\\page.tsx": "'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport PageContainer from '@/components/layout/page-container';\nimport { useRowData } from '@/context/rowDataContext';\nimport { MDXRemote } from 'next-mdx-remote';\nimport { serialize } from 'next-mdx-remote/serialize';\n\nconst ComponentsAndModulesPage = () => {\n  const { rowData } = useRowData();\n  const [serializedContent, setSerializedContent] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchFileContent = async () => {\n      if (rowData) {\n        const projectId = rowData.id;\n        const filename = 'components_and_modules.md';\n\n        try {\n          const response = await fetch(`http://localhost:4000/file/${projectId}/${filename}`);\n          if (response.ok) {\n            const content = await response.text();\n            const serialized = await serialize(content);\n            setSerializedContent(serialized);\n          } else {\n            setError('Failed to fetch file content.');\n          }\n        } catch (err) {\n          console.error('Error fetching file content:', err);\n          setError('Failed to fetch file content.');\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchFileContent();\n  }, [rowData]);\n\n  if (!rowData) {\n    return (\n      <PageContainer scrollable>\n        <p className=\"dark:text-gray-300\">Loading Components and Modules...</p>\n      </PageContainer>\n    );\n  }\n\n  if (loading) return <p className=\"dark:text-gray-300\">Loading file content...</p>;\n  if (error) return <p className=\"text-red-500 dark:text-red-400\">{error}</p>;\n\n  return (\n    <PageContainer scrollable>\n      {serializedContent && (\n        <div className=\"prose prose-sm \n                        dark:prose-invert \n                        prose-headings:dark:text-gray-200\n                        prose-p:dark:text-gray-300\n                        prose-a:dark:text-blue-400\n                        prose-strong:dark:text-gray-200\n                        prose-code:dark:text-gray-200\n                        prose-pre:dark:bg-gray-800\n                        prose-blockquote:dark:text-gray-300\n                        prose-li:dark:text-gray-300\n                        max-w-none\">\n          <MDXRemote {...serializedContent} />\n        </div>\n      )}\n    </PageContainer>\n  );\n};\n\nexport default ComponentsAndModulesPage;",
            "app\\projects\\[projectId]\\general\\page.tsx": "'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport PageContainer from '@/components/layout/page-container';\nimport { useRowData } from '@/context/rowDataContext';\nimport { MDXRemote } from 'next-mdx-remote';\nimport { serialize } from 'next-mdx-remote/serialize';\n\nconst GeneralInformationPage = () => {\n  const { rowData } = useRowData();\n  const [serializedContent, setSerializedContent] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchFileContent = async () => {\n      if (rowData) {\n        const projectId = rowData.id;\n        const filename = 'general.md';\n\n        try {\n          const response = await fetch(`http://localhost:4000/file/${projectId}/${filename}`);\n          if (response.ok) {\n            const content = await response.text();\n            const serialized = await serialize(content);\n            setSerializedContent(serialized);\n          } else {\n            setError('Failed to fetch file content.');\n          }\n        } catch (err) {\n          console.error('Error fetching file content:', err);\n          setError('Failed to fetch file content.');\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchFileContent();\n  }, [rowData]);\n\n  if (!rowData) {\n    return (\n      <PageContainer scrollable>\n        <p className=\"dark:text-gray-300\">Loading general information...</p>\n      </PageContainer>\n    );\n  }\n\n  if (loading) return <p className=\"dark:text-gray-300\">Loading file content...</p>;\n  if (error) return <p className=\"text-red-500 dark:text-red-400\">{error}</p>;\n\n  return (\n    <PageContainer scrollable>\n      {serializedContent && (\n        <div className=\"prose prose-sm \n                        dark:prose-invert \n                        prose-headings:dark:text-gray-200\n                        prose-p:dark:text-gray-300\n                        prose-a:dark:text-blue-400\n                        prose-strong:dark:text-gray-200\n                        prose-code:dark:text-gray-200\n                        prose-pre:dark:bg-gray-800\n                        prose-blockquote:dark:text-gray-300\n                        prose-li:dark:text-gray-300\n                        max-w-none\">\n          <MDXRemote {...serializedContent} />\n        </div>\n      )}\n    </PageContainer>\n  );\n};\n\nexport default GeneralInformationPage;",
            "app\\projects\\[projectId]\\qa\\page.tsx": "import React from 'react';\nimport PageContainer from '@/components/layout/page-container';\nimport InputBar from '@/components/InputBar';\n\nconst QandA = () => {\n  return (\n    <PageContainer scrollable={true}>\n      <div className=\"flex flex-col min-h-full\">\n        <div className=\"flex-1\">\n          <h1 className=\"text-2xl font-bold mb-4\">General Information</h1>\n          {/* Main content goes here */}\n        </div>\n      </div>\n      <InputBar />\n    </PageContainer>\n  );\n};\n\nexport default QandA;",
            "app\\projects\\[projectId]\\qa copy\\page.tsx": "import React from 'react';\nimport PageContainer from '@/components/layout/page-container';\nimport InputBar from '@/components/InputBar';\n\nconst QandA = () => {\n  return (\n    <PageContainer scrollable={true}>\n      <div className=\"flex flex-col min-h-full\">\n        <div className=\"flex-1\">\n          <h1 className=\"text-2xl font-bold mb-4\">General Information</h1>\n          {/* Main content goes here */}\n        </div>\n      </div>\n      <InputBar />\n    </PageContainer>\n  );\n};\n\nexport default QandA;",
            "app\\projects\\new\\page.tsx": "import { Breadcrumbs } from '@/components/breadcrumbs';\nimport { ProjectForm } from '@/components/forms/project-form';\nimport PageContainer from '@/components/layout/page-container';\nimport React from 'react';\n\n\nexport default function Page() {\n  return (\n    <PageContainer scrollable={true}>\n      <div className=\"space-y-4\">\n        <ProjectForm\n          initialData={null}\n          key={null}\n        />\n      </div>\n    </PageContainer>\n  );\n}\n",
            "components\\ChatModal.tsx": "import React, { useState, useRef, useEffect } from 'react';\nimport { useTheme } from 'next-themes';\nimport { Send } from 'lucide-react';\n\ninterface ChatModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface Message {\n  text: string;\n  type: 'user' | 'response';\n}\n\nconst ChatModal: React.FC<ChatModalProps> = ({ isOpen, onClose }) => {\n  const { theme } = useTheme();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Scroll to the bottom when messages update\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  if (!isOpen) return null;\n\n  const handleSendMessage = async () => {\n    if (message.trim() === '') return;\n\n    // Add user message to the chat\n    setMessages([...messages, { text: message, type: 'user' }]);\n    setMessage('');\n    setLoading(true);\n\n    try {\n      const res = await fetch('http://localhost:4000/chatInformation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message }),\n      });\n\n      const data = await res.json();\n      setMessages([...messages, { text: message, type: 'user' }, { text: data.message, type: 'response' }]);\n    } catch (error) {\n      console.error('Error sending chat information:', error);\n      setMessages([...messages, { text: message, type: 'user' }, { text: 'Error fetching response', type: 'response' }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault(); // Prevent the default behavior of Enter key (e.g., form submission)\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-y-0 right-0 z-50 w-full max-w-md h-full flex items-center justify-center p-4\">\n      <div className={`w-full max-w-md h-full flex flex-col rounded-2xl shadow-2xl ${\n        theme === 'dark' ? 'bg-gray-800 text-white border-gray-700' : 'bg-white text-black border-gray-200'\n      }`}>\n        <div className=\"flex justify-between items-center border-b p-4\">\n          <h2 className=\"text-lg font-semibold\">Chatbot</h2>\n          <button\n            aria-label=\"Close Chat\"\n            className=\"text-2xl text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-gray-100\"\n            onClick={onClose}\n          >\n            &times;\n          </button>\n        </div>\n        <div className=\"flex-grow p-4 overflow-y-auto\">\n          <div className=\"flex flex-col gap-2\">\n            {messages.map((msg, index) => (\n              <div\n                key={index}\n                className={`p-3 rounded-lg ${\n                  msg.type === 'user'\n                    ? 'bg-blue-500 text-white self-end'\n                    : 'bg-gray-200 text-black self-start'\n                }`}\n              >\n                {msg.text}\n              </div>\n            ))}\n            {loading && <p className=\"text-gray-500\">Loading...</p>}\n            {/* Ref to scroll to the bottom */}\n            <div ref={messagesEndRef} />\n          </div>\n        </div>\n        <div className=\"border-t p-4 flex items-center\">\n          <input\n            type=\"text\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyDown={handleKeyDown} // Add key down event handler\n            placeholder=\"Type your message...\"\n            className={`flex-grow p-3 rounded-full focus:outline-none ${\n              theme === 'dark' ? 'bg-gray-800 text-white' : 'bg-gray-100 text-black'\n            }`}\n          />\n          <button\n            aria-label=\"Send Message\"\n            className={`ml-2 p-3 rounded-full focus:outline-none ${\n              theme === 'dark' ? 'bg-white text-black' : 'bg-black text-white'\n            }`}\n            onClick={handleSendMessage}\n            disabled={loading}\n          >\n            <Send size={20} color={theme === 'dark' ? '#000000' : '#ffffff'} />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatModal;\n",
            "components\\InputBar copy.tsx": "// components/InputBar.tsx\n'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { ArrowRight } from 'lucide-react'; // Import ArrowRight icon from Lucide React\n\ninterface InputBarFormValues {\n  message: string;\n}\n\nconst InputBar: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n\n  const form = useForm<InputBarFormValues>({\n    defaultValues: {\n      message: ''\n    },\n    mode: 'onChange'\n  });\n\n  const { control, handleSubmit, reset } = form;\n\n  const onSubmit: SubmitHandler<InputBarFormValues> = async (data) => {\n    try {\n      setLoading(true);\n      console.log(\"Submitted message:\", data.message);\n      // Perform your submit action here, e.g., API call\n      reset(); // Clear the input field after submission\n    } catch (error) {\n      console.error(\"Submit error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-between\" >\n      <Form {...form}>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"flex w-full p-4\">\n          <FormField\n            control={control}\n            name=\"message\"\n            render={({ field }) => (\n              <FormItem className=\"flex-1\">\n                <FormLabel className=\"sr-only\">Message</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Type your message...\"\n                    {...field}\n                    disabled={loading}\n                    className=\"flex-1 border rounded-l-md dark:bg-gray-700 dark:text-white\"\n                    style={{ minWidth: '300px' }} // Make the input field wider\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </form>\n      </Form>\n    </div>\n  );\n};\n\nexport default InputBar;\n",
            "components\\InputBar.tsx": "// InputBar.tsx\n'use client';\n\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { ArrowRight } from 'lucide-react';\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  icon?: React.ReactNode;  // Add an optional icon prop\n}\n\nconst Input = React.forwardRef<HTMLTextAreaElement, InputProps>(\n  ({ className, icon, ...props }, ref) => {\n    return (\n      <div className=\"relative flex items-center w-full\">\n        <textarea\n          className={`h-12 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 resize-none overflow-auto ${className}`}\n          ref={ref}\n          rows={1}\n          {...props}\n        />\n        {icon && (\n          <div className=\"absolute inset-y-0 right-0 flex items-center pr-3 cursor-pointer group hover:text-blue-500 transition-colors duration-300\">\n            {icon}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\nInput.displayName = 'Input';\n\ninterface InputBarFormValues {\n  message: string;\n}\n\nconst InputBar: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n\n  const form = useForm<InputBarFormValues>({\n    defaultValues: {\n      message: ''\n    },\n    mode: 'onChange'\n  });\n\n  const { control, handleSubmit, reset } = form;\n\n  const onSubmit: SubmitHandler<InputBarFormValues> = async (data) => {\n    try {\n      setLoading(true);\n      console.log(\"Submitted message:\", data.message);\n      // Perform your submit action here, e.g., API call\n      reset(); // Clear the input field after submission\n    } catch (error) {\n      console.error(\"Submit error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"border-t bg-background sticky bottom-0 left-0 right-0\">\n      <form onSubmit={handleSubmit(onSubmit)} className=\"max-w-3xl mx-auto\">\n        <div className=\"p-4\">\n          <label className=\"sr-only\">Message</label>\n          <Input\n            placeholder=\"Type your message...\"\n            {...form.register(\"message\")}\n            disabled={loading}\n            icon={\n              <button type=\"submit\" disabled={loading}>\n                <ArrowRight className=\"w-5 h-5\" />\n              </button>\n            }\n            className=\"w-full border rounded-md dark:bg-gray-700 dark:text-white\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default InputBar;\n",
            "components\\breadcrumbs.tsx": "import {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator\n} from '@/components/ui/breadcrumb';\nimport { Slash } from 'lucide-react';\nimport { Fragment } from 'react';\n\ntype BreadcrumbItemProps = {\n  title: string;\n  link: string;\n};\n\nexport function Breadcrumbs({ items }: { items: BreadcrumbItemProps[] }) {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        {items.map((item, index) => (\n          <Fragment key={item.title}>\n            {index !== items.length - 1 && (\n              <BreadcrumbItem>\n                <BreadcrumbLink href={item.link}>{item.title}</BreadcrumbLink>\n              </BreadcrumbItem>\n            )}\n            {index < items.length - 1 && (\n              <BreadcrumbSeparator>\n                <Slash />\n              </BreadcrumbSeparator>\n            )}\n            {index === items.length - 1 && (\n              <BreadcrumbPage>{item.title}</BreadcrumbPage>\n            )}\n          </Fragment>\n        ))}\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n",
            "components\\dashboard-nav.tsx": "'use client';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { Icons } from '@/components/icons'; // Ensure this import is correct\nimport { cn } from '@/lib/utils';\nimport { NavItem } from '@/types';\nimport { Dispatch, SetStateAction } from 'react';\nimport { useSidebar } from '@/hooks/useSidebar';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger\n} from './ui/tooltip'; // Ensure this import is correct\n\ninterface DashboardNavProps {\n  items: NavItem[];\n  setOpen?: Dispatch<SetStateAction<boolean>>;\n  isMobileNav?: boolean;\n}\n\nexport function DashboardNav({\n  items,\n  setOpen,\n  isMobileNav = false\n}: DashboardNavProps) {\n  const path = usePathname();\n  const { isMinimized } = useSidebar();\n\n  if (!items?.length) {\n    return null;\n  }\n\n  return (\n    <nav className=\"grid items-start gap-2\">\n      <TooltipProvider>\n        {items.map((item, index) => {\n          // Check if an icon is provided\n          const Icon = item.icon ? Icons[item.icon] : null;\n          \n          // If Icon is not available, skip rendering this item\n          if (!Icon && !item.href) {\n            return null;\n          }\n\n          return (\n            item.href && (\n              <Tooltip key={index}>\n                <TooltipTrigger asChild>\n                  <Link\n                    href={item.disabled ? '/' : item.href}\n                    className={cn(\n                      'flex items-center gap-2 overflow-hidden rounded-md py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground',\n                      path === item.href ? 'bg-accent' : 'transparent',\n                      item.disabled && 'cursor-not-allowed opacity-80'\n                    )}\n                    onClick={() => {\n                      if (setOpen) setOpen(false);\n                    }}\n                  >\n                    {/* Render Icon only if it's defined */}\n                    {Icon && <Icon className={`ml-3 size-5 flex-none`} />}\n                    \n                    {isMobileNav || (!isMinimized && !isMobileNav) ? (\n                      <span className=\"mr-2 truncate\">{item.title}</span>\n                    ) : (\n                      ''\n                    )}\n                  </Link>\n                </TooltipTrigger>\n                <TooltipContent\n                  align=\"center\"\n                  side=\"right\"\n                  sideOffset={8}\n                  className={!isMinimized ? 'hidden' : 'inline-block'}\n                >\n                  {item.title}\n                </TooltipContent>\n              </Tooltip>\n            )\n          );\n        })}\n      </TooltipProvider>\n    </nav>\n  );\n}\n",
            "components\\date-range-picker.tsx": "'use client';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { CalendarIcon } from '@radix-ui/react-icons';\nimport { addDays, format } from 'date-fns';\nimport * as React from 'react';\nimport { DateRange } from 'react-day-picker';\n\nexport function CalendarDateRangePicker({\n  className\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const [date, setDate] = React.useState<DateRange | undefined>({\n    from: new Date(2023, 0, 20),\n    to: addDays(new Date(2023, 0, 20), 20)\n  });\n\n  return (\n    <div className={cn('grid gap-2', className)}>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            id=\"date\"\n            variant={'outline'}\n            className={cn(\n              'w-[260px] justify-start text-left font-normal',\n              !date && 'text-muted-foreground'\n            )}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {date?.from ? (\n              date.to ? (\n                <>\n                  {format(date.from, 'LLL dd, y')} -{' '}\n                  {format(date.to, 'LLL dd, y')}\n                </>\n              ) : (\n                format(date.from, 'LLL dd, y')\n              )\n            ) : (\n              <span>Pick a date</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"end\">\n          <Calendar\n            initialFocus\n            mode=\"range\"\n            defaultMonth={date?.from}\n            selected={date}\n            onSelect={setDate}\n            numberOfMonths={2}\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n",
            "components\\file-upload.tsx": "'use client';\n\nimport { useDropzone } from 'react-dropzone';\nimport { Trash } from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { Button } from './ui/button';\nimport { useToast } from './ui/use-toast';\n\nconst MAX_FILE_SIZE = 100 * 1024 * 1024; // 100 MB\n\ninterface FileUploadProps {\n  onChange?: (files: File[]) => void;\n  onRemove: (files: File[]) => void;\n  value: File[];\n}\n\nexport default function FileUpload({\n  onChange,\n  onRemove,\n  value\n}: FileUploadProps) {\n  const { toast } = useToast();\n  const [acceptedFiles, setAcceptedFiles] = useState<File[]>(value);\n\n  // Handle incoming value changes from the parent component\n  useEffect(() => {\n    setAcceptedFiles(value);\n  }, [value]);\n\n  const onDrop = (newAcceptedFiles: File[]) => {\n    // Update the state and parent component with new files\n    const updatedFiles = [...acceptedFiles, ...newAcceptedFiles];\n    setAcceptedFiles(updatedFiles);\n    if (onChange) {\n      onChange(updatedFiles);\n    }\n  };\n\n  const handleRemove = (file: File) => {\n    const filteredFiles = acceptedFiles.filter(f => f !== file);\n    setAcceptedFiles(filteredFiles);\n    if (onRemove) {\n      onRemove(filteredFiles);\n    }\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: {\n      'application/zip': ['.zip'],\n    },\n    maxSize: MAX_FILE_SIZE,\n    onDropRejected: (rejectedFiles) => {\n      rejectedFiles.forEach(file => {\n        if (file.errors) {\n          file.errors.forEach(error => {\n            if (error.code === 'file-too-large') {\n              toast({\n                title: 'Error',\n                variant: 'destructive',\n                description: 'File is too large. Max size is 100 MB.',\n              });\n            } else if (error.code === 'file-invalid-type') {\n              toast({\n                title: 'Error',\n                variant: 'destructive',\n                description: 'Invalid file type. Only ZIP files are allowed.',\n              });\n            }\n          });\n        }\n      });\n    }\n  });\n\n  return (\n    <div>\n      <div className=\"mb-4 flex items-center gap-4\">\n        {!!acceptedFiles.length &&\n          acceptedFiles.map((file, index) => (\n            <div\n              key={index}\n              className=\"relative h-[200px] w-[200px] overflow-hidden rounded-md flex items-center justify-center bg-gray-100\"\n            >\n              <div className=\"absolute right-2 top-2 z-10\">\n                <Button\n                  type=\"button\"\n                  onClick={() => handleRemove(file)}\n                  variant=\"destructive\"\n                  size=\"sm\"\n                >\n                  <Trash className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <div className=\"text-center text-sm\">\n                {file.name}\n              </div>\n            </div>\n          ))}\n      </div>\n      <div\n        {...getRootProps({\n          className: 'border-dashed border-2 border-gray-300 rounded-lg p-4 text-center cursor-pointer'\n        })}\n      >\n        <input {...getInputProps()} />\n        <p className=\"text-sm text-gray-600\">\n          Drag & drop ZIP files here, or click to select files\n        </p>\n      </div>\n    </div>\n  );\n}\n",
            "components\\github-auth-button.tsx": "'use client';\n\nimport { useSearchParams } from 'next/navigation';\nimport { signIn } from 'next-auth/react';\nimport { Button } from './ui/button';\nimport { Icons } from './icons';\n\nexport default function GithubSignInButton() {\n  const searchParams = useSearchParams();\n  const callbackUrl = searchParams.get('callbackUrl');\n\n  return (\n    <Button\n      className=\"w-full\"\n      variant=\"outline\"\n      type=\"button\"\n      onClick={() =>\n        signIn('github', { callbackUrl: callbackUrl ?? '/dashboard' })\n      }\n    >\n      <Icons.gitHub className=\"mr-2 h-4 w-4\" />\n      Continue with Github\n    </Button>\n  );\n}\n",
            "components\\icons.tsx": "import {\n  AlertTriangle,\n  ArrowRight,\n  ArrowLeft,\n  Check,\n  ChevronLeft,\n  ChevronRight,\n  CircuitBoardIcon,\n  Command,\n  CreditCard,\n  File,\n  FileText,\n  HelpCircle,\n  Image,\n  Laptop,\n  LayoutDashboardIcon,\n  Loader2,\n  LogIn,\n  LucideIcon,\n  LucideProps,\n  Moon,\n  MoreVertical,\n  Pizza,\n  Plus,\n  Settings,\n  SunMedium,\n  Trash,\n  Twitter,\n  User,\n  User2Icon,\n  UserX2Icon,\n  X,\n  BadgeInfo,\n  Code,\n  Box,\n  Brush,\n  Wrench,\n  Sparkle\n} from 'lucide-react';\n\nexport type Icon = LucideIcon;\n\nexport const Icons = {\n  dashboard: LayoutDashboardIcon,\n  logo: Command,\n  login: LogIn,\n  close: X,\n  profile: User2Icon,\n  spinner: Loader2,\n  kanban: CircuitBoardIcon,\n  chevronLeft: ChevronLeft,\n  chevronRight: ChevronRight,\n  trash: Trash,\n  employee: UserX2Icon,\n  post: FileText,\n  page: File,\n  media: Image,\n  settings: Settings,\n  billing: CreditCard,\n  ellipsis: MoreVertical,\n  add: Plus,\n  warning: AlertTriangle,\n  user: User,\n  arrowRight: ArrowRight,\n  help: HelpCircle,\n  pizza: Pizza,\n  sun: SunMedium,\n  moon: Moon,\n  laptop: Laptop,\n  ArrowLeft: ArrowLeft,\n  BadgeInfo: BadgeInfo,\n  Code: Code,\n  Box: Box,\n  Brush: Brush,\n  Wrench: Wrench,\n  HelpCircle: HelpCircle,\n  Sparkle: Sparkle,\n  gitHub: ({ ...props }: LucideProps) => (\n    <svg\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      data-prefix=\"fab\"\n      data-icon=\"github\"\n      role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 496 512\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"\n      ></path>\n    </svg>\n  ),\n  twitter: Twitter,\n  check: Check\n};\n",
            "components\\overview.tsx": "'use client';\n\nimport { Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from 'recharts';\n\nconst data = [\n  {\n    name: 'Jan',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Feb',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Mar',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Apr',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'May',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Jun',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Jul',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Aug',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Sep',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Oct',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Nov',\n    total: Math.floor(Math.random() * 5000) + 1000\n  },\n  {\n    name: 'Dec',\n    total: Math.floor(Math.random() * 5000) + 1000\n  }\n];\n\nexport function Overview() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <BarChart data={data}>\n        <XAxis\n          dataKey=\"name\"\n          stroke=\"#888888\"\n          fontSize={12}\n          tickLine={false}\n          axisLine={false}\n        />\n        <YAxis\n          stroke=\"#888888\"\n          fontSize={12}\n          tickLine={false}\n          axisLine={false}\n          tickFormatter={(value) => `$${value}`}\n        />\n        <Bar dataKey=\"total\" fill=\"#adfa1d\" radius={[4, 4, 0, 0]} />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n",
            "components\\recent-sales.tsx": "import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\nexport function RecentSales() {\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex items-center\">\n        <Avatar className=\"h-9 w-9\">\n          <AvatarImage src=\"/avatars/01.png\" alt=\"Avatar\" />\n          <AvatarFallback>OM</AvatarFallback>\n        </Avatar>\n        <div className=\"ml-4 space-y-1\">\n          <p className=\"text-sm font-medium leading-none\">Olivia Martin</p>\n          <p className=\"text-sm text-muted-foreground\">\n            olivia.martin@email.com\n          </p>\n        </div>\n        <div className=\"ml-auto font-medium\">+$1,999.00</div>\n      </div>\n      <div className=\"flex items-center\">\n        <Avatar className=\"flex h-9 w-9 items-center justify-center space-y-0 border\">\n          <AvatarImage src=\"/avatars/02.png\" alt=\"Avatar\" />\n          <AvatarFallback>JL</AvatarFallback>\n        </Avatar>\n        <div className=\"ml-4 space-y-1\">\n          <p className=\"text-sm font-medium leading-none\">Jackson Lee</p>\n          <p className=\"text-sm text-muted-foreground\">jackson.lee@email.com</p>\n        </div>\n        <div className=\"ml-auto font-medium\">+$39.00</div>\n      </div>\n      <div className=\"flex items-center\">\n        <Avatar className=\"h-9 w-9\">\n          <AvatarImage src=\"/avatars/03.png\" alt=\"Avatar\" />\n          <AvatarFallback>IN</AvatarFallback>\n        </Avatar>\n        <div className=\"ml-4 space-y-1\">\n          <p className=\"text-sm font-medium leading-none\">Isabella Nguyen</p>\n          <p className=\"text-sm text-muted-foreground\">\n            isabella.nguyen@email.com\n          </p>\n        </div>\n        <div className=\"ml-auto font-medium\">+$299.00</div>\n      </div>\n      <div className=\"flex items-center\">\n        <Avatar className=\"h-9 w-9\">\n          <AvatarImage src=\"/avatars/04.png\" alt=\"Avatar\" />\n          <AvatarFallback>WK</AvatarFallback>\n        </Avatar>\n        <div className=\"ml-4 space-y-1\">\n          <p className=\"text-sm font-medium leading-none\">William Kim</p>\n          <p className=\"text-sm text-muted-foreground\">will@email.com</p>\n        </div>\n        <div className=\"ml-auto font-medium\">+$99.00</div>\n      </div>\n      <div className=\"flex items-center\">\n        <Avatar className=\"h-9 w-9\">\n          <AvatarImage src=\"/avatars/05.png\" alt=\"Avatar\" />\n          <AvatarFallback>SD</AvatarFallback>\n        </Avatar>\n        <div className=\"ml-4 space-y-1\">\n          <p className=\"text-sm font-medium leading-none\">Sofia Davis</p>\n          <p className=\"text-sm text-muted-foreground\">sofia.davis@email.com</p>\n        </div>\n        <div className=\"ml-auto font-medium\">+$39.00</div>\n      </div>\n    </div>\n  );\n}\n",
            "components\\charts\\area-graph.tsx": "'use client';\n\nimport { TrendingUp } from 'lucide-react';\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts';\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle\n} from '@/components/ui/card';\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent\n} from '@/components/ui/chart';\nconst chartData = [\n  { month: 'January', desktop: 186, mobile: 80 },\n  { month: 'February', desktop: 305, mobile: 200 },\n  { month: 'March', desktop: 237, mobile: 120 },\n  { month: 'April', desktop: 73, mobile: 190 },\n  { month: 'May', desktop: 209, mobile: 130 },\n  { month: 'June', desktop: 214, mobile: 140 }\n];\n\nconst chartConfig = {\n  desktop: {\n    label: 'Desktop',\n    color: 'hsl(var(--chart-1))'\n  },\n  mobile: {\n    label: 'Mobile',\n    color: 'hsl(var(--chart-2))'\n  }\n} satisfies ChartConfig;\n\nexport function AreaGraph() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Area Chart - Stacked</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer\n          config={chartConfig}\n          className=\"aspect-auto h-[310px] w-full\"\n        >\n          <AreaChart\n            accessibilityLayer\n            data={chartData}\n            margin={{\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent indicator=\"dot\" />}\n            />\n            <Area\n              dataKey=\"mobile\"\n              type=\"natural\"\n              fill=\"var(--color-mobile)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-mobile)\"\n              stackId=\"a\"\n            />\n            <Area\n              dataKey=\"desktop\"\n              type=\"natural\"\n              fill=\"var(--color-desktop)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-desktop)\"\n              stackId=\"a\"\n            />\n          </AreaChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter>\n        <div className=\"flex w-full items-start gap-2 text-sm\">\n          <div className=\"grid gap-2\">\n            <div className=\"flex items-center gap-2 font-medium leading-none\">\n              Trending up by 5.2% this month <TrendingUp className=\"h-4 w-4\" />\n            </div>\n            <div className=\"flex items-center gap-2 leading-none text-muted-foreground\">\n              January - June 2024\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
            "components\\charts\\bar-graph.tsx": "'use client';\n\nimport * as React from 'react';\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts';\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle\n} from '@/components/ui/card';\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent\n} from '@/components/ui/chart';\n\nexport const description = 'An interactive bar chart';\n\nconst chartData = [\n  { date: '2024-04-01', desktop: 222, mobile: 150 },\n  { date: '2024-04-02', desktop: 97, mobile: 180 },\n  { date: '2024-04-03', desktop: 167, mobile: 120 },\n  { date: '2024-04-04', desktop: 242, mobile: 260 },\n  { date: '2024-04-05', desktop: 373, mobile: 290 },\n  { date: '2024-04-06', desktop: 301, mobile: 340 },\n  { date: '2024-04-07', desktop: 245, mobile: 180 },\n  { date: '2024-04-08', desktop: 409, mobile: 320 },\n  { date: '2024-04-09', desktop: 59, mobile: 110 },\n  { date: '2024-04-10', desktop: 261, mobile: 190 },\n  { date: '2024-04-11', desktop: 327, mobile: 350 },\n  { date: '2024-04-12', desktop: 292, mobile: 210 },\n  { date: '2024-04-13', desktop: 342, mobile: 380 },\n  { date: '2024-04-14', desktop: 137, mobile: 220 },\n  { date: '2024-04-15', desktop: 120, mobile: 170 },\n  { date: '2024-04-16', desktop: 138, mobile: 190 },\n  { date: '2024-04-17', desktop: 446, mobile: 360 },\n  { date: '2024-04-18', desktop: 364, mobile: 410 },\n  { date: '2024-04-19', desktop: 243, mobile: 180 },\n  { date: '2024-04-20', desktop: 89, mobile: 150 },\n  { date: '2024-04-21', desktop: 137, mobile: 200 },\n  { date: '2024-04-22', desktop: 224, mobile: 170 },\n  { date: '2024-04-23', desktop: 138, mobile: 230 },\n  { date: '2024-04-24', desktop: 387, mobile: 290 },\n  { date: '2024-04-25', desktop: 215, mobile: 250 },\n  { date: '2024-04-26', desktop: 75, mobile: 130 },\n  { date: '2024-04-27', desktop: 383, mobile: 420 },\n  { date: '2024-04-28', desktop: 122, mobile: 180 },\n  { date: '2024-04-29', desktop: 315, mobile: 240 },\n  { date: '2024-04-30', desktop: 454, mobile: 380 },\n  { date: '2024-05-01', desktop: 165, mobile: 220 },\n  { date: '2024-05-02', desktop: 293, mobile: 310 },\n  { date: '2024-05-03', desktop: 247, mobile: 190 },\n  { date: '2024-05-04', desktop: 385, mobile: 420 },\n  { date: '2024-05-05', desktop: 481, mobile: 390 },\n  { date: '2024-05-06', desktop: 498, mobile: 520 },\n  { date: '2024-05-07', desktop: 388, mobile: 300 },\n  { date: '2024-05-08', desktop: 149, mobile: 210 },\n  { date: '2024-05-09', desktop: 227, mobile: 180 },\n  { date: '2024-05-10', desktop: 293, mobile: 330 },\n  { date: '2024-05-11', desktop: 335, mobile: 270 },\n  { date: '2024-05-12', desktop: 197, mobile: 240 },\n  { date: '2024-05-13', desktop: 197, mobile: 160 },\n  { date: '2024-05-14', desktop: 448, mobile: 490 },\n  { date: '2024-05-15', desktop: 473, mobile: 380 },\n  { date: '2024-05-16', desktop: 338, mobile: 400 },\n  { date: '2024-05-17', desktop: 499, mobile: 420 },\n  { date: '2024-05-18', desktop: 315, mobile: 350 },\n  { date: '2024-05-19', desktop: 235, mobile: 180 },\n  { date: '2024-05-20', desktop: 177, mobile: 230 },\n  { date: '2024-05-21', desktop: 82, mobile: 140 },\n  { date: '2024-05-22', desktop: 81, mobile: 120 },\n  { date: '2024-05-23', desktop: 252, mobile: 290 },\n  { date: '2024-05-24', desktop: 294, mobile: 220 },\n  { date: '2024-05-25', desktop: 201, mobile: 250 },\n  { date: '2024-05-26', desktop: 213, mobile: 170 },\n  { date: '2024-05-27', desktop: 420, mobile: 460 },\n  { date: '2024-05-28', desktop: 233, mobile: 190 },\n  { date: '2024-05-29', desktop: 78, mobile: 130 },\n  { date: '2024-05-30', desktop: 340, mobile: 280 },\n  { date: '2024-05-31', desktop: 178, mobile: 230 },\n  { date: '2024-06-01', desktop: 178, mobile: 200 },\n  { date: '2024-06-02', desktop: 470, mobile: 410 },\n  { date: '2024-06-03', desktop: 103, mobile: 160 },\n  { date: '2024-06-04', desktop: 439, mobile: 380 },\n  { date: '2024-06-05', desktop: 88, mobile: 140 },\n  { date: '2024-06-06', desktop: 294, mobile: 250 },\n  { date: '2024-06-07', desktop: 323, mobile: 370 },\n  { date: '2024-06-08', desktop: 385, mobile: 320 },\n  { date: '2024-06-09', desktop: 438, mobile: 480 },\n  { date: '2024-06-10', desktop: 155, mobile: 200 },\n  { date: '2024-06-11', desktop: 92, mobile: 150 },\n  { date: '2024-06-12', desktop: 492, mobile: 420 },\n  { date: '2024-06-13', desktop: 81, mobile: 130 },\n  { date: '2024-06-14', desktop: 426, mobile: 380 },\n  { date: '2024-06-15', desktop: 307, mobile: 350 },\n  { date: '2024-06-16', desktop: 371, mobile: 310 },\n  { date: '2024-06-17', desktop: 475, mobile: 520 },\n  { date: '2024-06-18', desktop: 107, mobile: 170 },\n  { date: '2024-06-19', desktop: 341, mobile: 290 },\n  { date: '2024-06-20', desktop: 408, mobile: 450 },\n  { date: '2024-06-21', desktop: 169, mobile: 210 },\n  { date: '2024-06-22', desktop: 317, mobile: 270 },\n  { date: '2024-06-23', desktop: 480, mobile: 530 },\n  { date: '2024-06-24', desktop: 132, mobile: 180 },\n  { date: '2024-06-25', desktop: 141, mobile: 190 },\n  { date: '2024-06-26', desktop: 434, mobile: 380 },\n  { date: '2024-06-27', desktop: 448, mobile: 490 },\n  { date: '2024-06-28', desktop: 149, mobile: 200 },\n  { date: '2024-06-29', desktop: 103, mobile: 160 },\n  { date: '2024-06-30', desktop: 446, mobile: 400 }\n];\n\nconst chartConfig = {\n  views: {\n    label: 'Page Views'\n  },\n  desktop: {\n    label: 'Desktop',\n    color: 'hsl(var(--chart-1))'\n  },\n  mobile: {\n    label: 'Mobile',\n    color: 'hsl(var(--chart-2))'\n  }\n} satisfies ChartConfig;\n\nexport function BarGraph() {\n  const [activeChart, setActiveChart] =\n    React.useState<keyof typeof chartConfig>('desktop');\n\n  const total = React.useMemo(\n    () => ({\n      desktop: chartData.reduce((acc, curr) => acc + curr.desktop, 0),\n      mobile: chartData.reduce((acc, curr) => acc + curr.mobile, 0)\n    }),\n    []\n  );\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-col items-stretch space-y-0 border-b p-0 sm:flex-row\">\n        <div className=\"flex flex-1 flex-col justify-center gap-1 px-6 py-5 sm:py-6\">\n          <CardTitle>Bar Chart - Interactive</CardTitle>\n          <CardDescription>\n            Showing total visitors for the last 3 months\n          </CardDescription>\n        </div>\n        <div className=\"flex\">\n          {['desktop', 'mobile'].map((key) => {\n            const chart = key as keyof typeof chartConfig;\n            return (\n              <button\n                key={chart}\n                data-active={activeChart === chart}\n                className=\"relative flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l data-[active=true]:bg-muted/50 sm:border-l sm:border-t-0 sm:px-8 sm:py-6\"\n                onClick={() => setActiveChart(chart)}\n              >\n                <span className=\"text-xs text-muted-foreground\">\n                  {chartConfig[chart].label}\n                </span>\n                <span className=\"text-lg font-bold leading-none sm:text-3xl\">\n                  {total[key as keyof typeof total].toLocaleString()}\n                </span>\n              </button>\n            );\n          })}\n        </div>\n      </CardHeader>\n      <CardContent className=\"px-2 sm:p-6\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"aspect-auto h-[280px] w-full\"\n        >\n          <BarChart\n            accessibilityLayer\n            data={chartData}\n            margin={{\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"date\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              minTickGap={32}\n              tickFormatter={(value) => {\n                const date = new Date(value);\n                return date.toLocaleDateString('en-US', {\n                  month: 'short',\n                  day: 'numeric'\n                });\n              }}\n            />\n            <ChartTooltip\n              content={\n                <ChartTooltipContent\n                  className=\"w-[150px]\"\n                  nameKey=\"views\"\n                  labelFormatter={(value) => {\n                    return new Date(value).toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric',\n                      year: 'numeric'\n                    });\n                  }}\n                />\n              }\n            />\n            <Bar dataKey={activeChart} fill={`var(--color-${activeChart})`} />\n          </BarChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n",
            "components\\charts\\pie-graph.tsx": "'use client';\n\nimport * as React from 'react';\nimport { TrendingUp } from 'lucide-react';\nimport { Label, Pie, PieChart } from 'recharts';\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle\n} from '@/components/ui/card';\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent\n} from '@/components/ui/chart';\nconst chartData = [\n  { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n  { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n  { browser: 'firefox', visitors: 287, fill: 'var(--color-firefox)' },\n  { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n  { browser: 'other', visitors: 190, fill: 'var(--color-other)' }\n];\n\nconst chartConfig = {\n  visitors: {\n    label: 'Visitors'\n  },\n  chrome: {\n    label: 'Chrome',\n    color: 'hsl(var(--chart-1))'\n  },\n  safari: {\n    label: 'Safari',\n    color: 'hsl(var(--chart-2))'\n  },\n  firefox: {\n    label: 'Firefox',\n    color: 'hsl(var(--chart-3))'\n  },\n  edge: {\n    label: 'Edge',\n    color: 'hsl(var(--chart-4))'\n  },\n  other: {\n    label: 'Other',\n    color: 'hsl(var(--chart-5))'\n  }\n} satisfies ChartConfig;\n\nexport function PieGraph() {\n  const totalVisitors = React.useMemo(() => {\n    return chartData.reduce((acc, curr) => acc + curr.visitors, 0);\n  }, []);\n\n  return (\n    <Card className=\"flex flex-col\">\n      <CardHeader className=\"items-center pb-0\">\n        <CardTitle>Pie Chart - Donut with Text</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1 pb-0\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"mx-auto aspect-square max-h-[360px]\"\n        >\n          <PieChart>\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent hideLabel />}\n            />\n            <Pie\n              data={chartData}\n              dataKey=\"visitors\"\n              nameKey=\"browser\"\n              innerRadius={60}\n              strokeWidth={5}\n            >\n              <Label\n                content={({ viewBox }) => {\n                  if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                    return (\n                      <text\n                        x={viewBox.cx}\n                        y={viewBox.cy}\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                      >\n                        <tspan\n                          x={viewBox.cx}\n                          y={viewBox.cy}\n                          className=\"fill-foreground text-3xl font-bold\"\n                        >\n                          {totalVisitors.toLocaleString()}\n                        </tspan>\n                        <tspan\n                          x={viewBox.cx}\n                          y={(viewBox.cy || 0) + 24}\n                          className=\"fill-muted-foreground\"\n                        >\n                          Visitors\n                        </tspan>\n                      </text>\n                    );\n                  }\n                }}\n              />\n            </Pie>\n          </PieChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"leading-none text-muted-foreground\">\n          Showing total visitors for the last 6 months\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
            "components\\forms\\employee-form.tsx": "'use client';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage\n} from '@/components/ui/form';\nimport { Heading } from '@/components/ui/heading';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Trash } from 'lucide-react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as z from 'zod';\nimport FileUpload from '../file-upload';\nimport { useToast } from '../ui/use-toast';\nconst ImgSchema = z.object({\n  fileName: z.string(),\n  name: z.string(),\n  fileSize: z.number(),\n  size: z.number(),\n  fileKey: z.string(),\n  key: z.string(),\n  fileUrl: z.string(),\n  url: z.string()\n});\nexport const IMG_MAX_LIMIT = 3;\nconst formSchema = z.object({\n  name: z\n    .string()\n    .min(3, { message: 'Product Name must be at least 3 characters' }),\n  imgUrl: z\n    .array(ImgSchema)\n    .max(IMG_MAX_LIMIT, { message: 'You can only add up to 3 images' })\n    .min(1, { message: 'At least one image must be added.' }),\n  description: z\n    .string()\n    .min(3, { message: 'Product description must be at least 3 characters' }),\n  price: z.coerce.number(),\n  category: z.string().min(1, { message: 'Please select a category' })\n});\n\ntype ProductFormValues = z.infer<typeof formSchema>;\n\ninterface ProductFormProps {\n  initialData: any | null;\n  categories: any;\n}\n\nexport const EmployeeForm: React.FC<ProductFormProps> = ({\n  initialData,\n  categories\n}) => {\n  const params = useParams();\n  const router = useRouter();\n  const { toast } = useToast();\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const title = initialData ? 'Edit product' : 'Create product';\n  const description = initialData ? 'Edit a product.' : 'Add a new product';\n  const toastMessage = initialData ? 'Product updated.' : 'Product created.';\n  const action = initialData ? 'Save changes' : 'Create';\n\n  const defaultValues = initialData\n    ? initialData\n    : {\n        name: '',\n        description: '',\n        price: 0,\n        imgUrl: [],\n        category: ''\n      };\n\n  const form = useForm<ProductFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues\n  });\n\n  const onSubmit = async (data: ProductFormValues) => {\n    try {\n      setLoading(true);\n      if (initialData) {\n        // await axios.post(`/api/products/edit-product/${initialData._id}`, data);\n      } else {\n        // const res = await axios.post(`/api/products/create-product`, data);\n        // console.log(\"product\", res);\n      }\n      router.refresh();\n      router.push(`/dashboard/products`);\n      toast({\n        variant: 'destructive',\n        title: 'Uh oh! Something went wrong.',\n        description: 'There was a problem with your request.'\n      });\n    } catch (error: any) {\n      toast({\n        variant: 'destructive',\n        title: 'Uh oh! Something went wrong.',\n        description: 'There was a problem with your request.'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onDelete = async () => {\n    try {\n      setLoading(true);\n      //   await axios.delete(`/api/${params.storeId}/products/${params.productId}`);\n      router.refresh();\n      router.push(`/${params.storeId}/products`);\n    } catch (error: any) {\n    } finally {\n      setLoading(false);\n      setOpen(false);\n    }\n  };\n\n  const triggerImgUrlValidation = () => form.trigger('imgUrl');\n\n  return (\n    <>\n      {/* <AlertModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        onConfirm={onDelete}\n        loading={loading}\n      /> */}\n      <div className=\"flex items-center justify-between\">\n        <Heading title={title} description={description} />\n        {initialData && (\n          <Button\n            disabled={loading}\n            variant=\"destructive\"\n            size=\"sm\"\n            onClick={() => setOpen(true)}\n          >\n            <Trash className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      <Separator />\n      <Form {...form}>\n        <form\n          onSubmit={form.handleSubmit(onSubmit)}\n          className=\"w-full space-y-8\"\n        >\n          <FormField\n            control={form.control}\n            name=\"imgUrl\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Images</FormLabel>\n                <FormControl>\n                  <FileUpload\n                    onChange={field.onChange}\n                    value={field.value}\n                    onRemove={field.onChange}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <div className=\"gap-8 md:grid md:grid-cols-3\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={loading}\n                      placeholder=\"Product name\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={loading}\n                      placeholder=\"Product description\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"price\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Price</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" disabled={loading} {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category</FormLabel>\n                  <Select\n                    disabled={loading}\n                    onValueChange={field.onChange}\n                    value={field.value}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue\n                          defaultValue={field.value}\n                          placeholder=\"Select a category\"\n                        />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {/* @ts-ignore  */}\n                      {categories.map((category) => (\n                        <SelectItem key={category._id} value={category._id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <Button disabled={loading} className=\"ml-auto\" type=\"submit\">\n            {action}\n          </Button>\n        </form>\n      </Form>\n    </>\n  );\n};\n",
            "components\\forms\\product-form.tsx": "'use client';\nimport * as z from 'zod';\nimport { useState } from 'react';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { Trash } from 'lucide-react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage\n} from '@/components/ui/form';\nimport { Separator } from '@/components/ui/separator';\nimport { Heading } from '@/components/ui/heading';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\n// import FileUpload from \"@/components/FileUpload\";\nimport { useToast } from '../ui/use-toast';\nimport FileUpload from '../file-upload';\nconst ImgSchema = z.object({\n  fileName: z.string(),\n  name: z.string(),\n  fileSize: z.number(),\n  size: z.number(),\n  fileKey: z.string(),\n  key: z.string(),\n  fileUrl: z.string(),\n  url: z.string()\n});\nexport const IMG_MAX_LIMIT = 3;\nconst formSchema = z.object({\n  name: z\n    .string()\n    .min(3, { message: 'Product Name must be at least 3 characters' }),\n  imgUrl: z\n    .array(ImgSchema)\n    .max(IMG_MAX_LIMIT, { message: 'You can only add up to 3 images' })\n    .min(1, { message: 'At least one image must be added.' }),\n  description: z\n    .string()\n    .min(3, { message: 'Product description must be at least 3 characters' }),\n  price: z.coerce.number(),\n  category: z.string().min(1, { message: 'Please select a category' })\n});\n\ntype ProductFormValues = z.infer<typeof formSchema>;\n\ninterface ProductFormProps {\n  initialData: any | null;\n  categories: any;\n}\n\nexport const ProductForm: React.FC<ProductFormProps> = ({\n  initialData,\n  categories\n}) => {\n  const params = useParams();\n  const router = useRouter();\n  const { toast } = useToast();\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [imgLoading, setImgLoading] = useState(false);\n  const title = initialData ? 'Edit product' : 'Create product';\n  const description = initialData ? 'Edit a product.' : 'Add a new product';\n  const toastMessage = initialData ? 'Product updated.' : 'Product created.';\n  const action = initialData ? 'Save changes' : 'Create';\n\n  const defaultValues = initialData\n    ? initialData\n    : {\n        name: '',\n        description: '',\n        price: 0,\n        imgUrl: [],\n        category: ''\n      };\n\n  const form = useForm<ProductFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues\n  });\n\n  const onSubmit = async (data: ProductFormValues) => {\n    try {\n      setLoading(true);\n      if (initialData) {\n        // await axios.post(`/api/products/edit-product/${initialData._id}`, data);\n      } else {\n        // const res = await axios.post(`/api/products/create-product`, data);\n        // console.log(\"product\", res);\n      }\n      router.refresh();\n      router.push(`/dashboard/products`);\n      toast({\n        variant: 'destructive',\n        title: 'Uh oh! Something went wrong.',\n        description: 'There was a problem with your request.'\n      });\n    } catch (error: any) {\n      toast({\n        variant: 'destructive',\n        title: 'Uh oh! Something went wrong.',\n        description: 'There was a problem with your request.'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onDelete = async () => {\n    try {\n      setLoading(true);\n      //   await axios.delete(`/api/${params.storeId}/products/${params.productId}`);\n      router.refresh();\n      router.push(`/${params.storeId}/products`);\n    } catch (error: any) {\n    } finally {\n      setLoading(false);\n      setOpen(false);\n    }\n  };\n\n  const triggerImgUrlValidation = () => form.trigger('imgUrl');\n\n  return (\n    <>\n      {/* <AlertModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        onConfirm={onDelete}\n        loading={loading}\n      /> */}\n      <div className=\"flex items-center justify-between\">\n        <Heading title={title} description={description} />\n        {initialData && (\n          <Button\n            disabled={loading}\n            variant=\"destructive\"\n            size=\"sm\"\n            onClick={() => setOpen(true)}\n          >\n            <Trash className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      <Separator />\n      <Form {...form}>\n        <form\n          onSubmit={form.handleSubmit(onSubmit)}\n          className=\"w-full space-y-8\"\n        >\n          <FormField\n            control={form.control}\n            name=\"imgUrl\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Images</FormLabel>\n                <FormControl>\n                  <FileUpload\n                    onChange={field.onChange}\n                    value={field.value}\n                    onRemove={field.onChange}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <div className=\"gap-8 md:grid md:grid-cols-3\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={loading}\n                      placeholder=\"Product name\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={loading}\n                      placeholder=\"Product description\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"price\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Price</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" disabled={loading} {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category</FormLabel>\n                  <Select\n                    disabled={loading}\n                    onValueChange={field.onChange}\n                    value={field.value}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue\n                          defaultValue={field.value}\n                          placeholder=\"Select a category\"\n                        />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {/* @ts-ignore  */}\n                      {categories.map((category) => (\n                        <SelectItem key={category._id} value={category._id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <Button disabled={loading} className=\"ml-auto\" type=\"submit\">\n            {action}\n          </Button>\n        </form>\n      </Form>\n    </>\n  );\n};\n",
            "components\\forms\\project-form.tsx": "\"use client\";\n\nimport axios from 'axios';\nimport * as z from 'zod';\nimport { useState } from 'react';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { Trash } from 'lucide-react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage\n} from '@/components/ui/form';\nimport { Separator } from '@/components/ui/separator';\nimport { Heading } from '@/components/ui/heading';\nimport { useToast } from '@/components/ui/use-toast';\nimport FileUpload from '../file-upload';\n\nconst ImgSchema = z.object({\n  fileName: z.string(),\n  name: z.string(),\n  fileSize: z.number(),\n  size: z.number(),\n  fileKey: z.string(),\n  key: z.string(),\n  fileUrl: z.string(),\n  url: z.string()\n});\n\nexport const IMG_MAX_LIMIT = 3;\n\nconst formSchema = z.object({\n  name: z\n    .string()\n    .min(3, { message: 'Project Name must be at least 3 characters' }),\n  projectZIP: z\n    .array(z.instanceof(File))\n    .max(IMG_MAX_LIMIT, { message: 'You can only add 1 zip file' })\n    .refine((value, context) => {\n      if (!value.length && !context.parent.githubUrl) {\n        return false;\n      }\n      return true;\n    }, { message: 'You must upload at least one zip file or provide a GitHub URL.' }),\n  description: z\n    .string()\n    .min(3, { message: 'Project description must be at least 3 characters' }),\n  githubUrl: z.string().url({ message: 'Please enter a valid GitHub URL' }).optional()\n    .refine((value, context) => {\n      if (!value && !context.parent.projectZIP.length) {\n        return false;\n      }\n      return true;\n    }, { message: 'You must upload at least one zip file or provide a GitHub URL.' })\n});\n\ntype ProjectFormValues = z.infer<typeof formSchema>;\n\ninterface ProjectFormProps {\n  initialData: any | null;\n}\n\nexport const ProjectForm: React.FC<ProjectFormProps> = ({\n  initialData,\n}) => {\n  const params = useParams();\n  const router = useRouter();\n  const { toast } = useToast();\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [imgLoading, setImgLoading] = useState(false);\n  const title = initialData ? 'Edit project' : 'Create project';\n  const description = initialData ? 'Edit a project.' : 'Add a new project';\n  const toastMessage = initialData ? 'Project updated.' : 'Project created.';\n  const action = initialData ? 'Save changes' : 'Create';\n\n  const defaultValues = initialData\n    ? initialData\n    : {\n        name: '',\n        description: '',\n        projectZIP: [],\n        githubUrl: ''\n      };\n\n  const form = useForm<ProjectFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues\n  });\n\n  const onSubmit = async (data: ProjectFormValues) => {\n    try {\n      setLoading(true);\n  \n      const formData = new FormData();\n  \n      if (data.projectZIP && data.projectZIP.length > 0) {\n        formData.append('file', data.projectZIP[0]);\n      }\n  \n      formData.append('name', data.name);\n      formData.append('description', data.description);\n      formData.append('organization', 'Your Organization');\n  \n      const response = await axios.post('http://localhost:4000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n  \n      toast({\n        title: \"Success\",\n        description: response.data.message,\n      });\n      router.push('/projects');\n  \n    } catch (error) {\n      console.error('Error submitting form:', error);\n      toast({\n        title: \"Error\",\n        description: \"An error occurred while uploading the file.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onDelete = async () => {\n    try {\n      setLoading(true);\n      //   await axios.delete(`/api/${params.storeId}/projects/${params.projectId}`);\n      router.refresh();\n      router.push(`/${params.storeId}/projects`);\n    } catch (error: any) {\n    } finally {\n      setLoading(false);\n      setOpen(false);\n    }\n  };\n\n  const triggerprojectZIPValidation = () => form.trigger('projectZIP');\n\n  return (\n    <>\n      {/* <AlertModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        onConfirm={onDelete}\n        loading={loading}\n      /> */}\n      <div className=\"flex items-center justify-between\">\n        <Heading title={title} description={description} />\n        {initialData && (\n          <Button\n            disabled={loading}\n            variant=\"destructive\"\n            size=\"sm\"\n            onClick={() => setOpen(true)}\n          >\n            <Trash className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      <Separator />\n      <Form {...form}>\n        <form\n          onSubmit={form.handleSubmit(onSubmit)}\n          className=\"w-full space-y-8\"\n        >\n          <FormField\n            control={form.control}\n            name=\"projectZIP\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Project ZIP Folder</FormLabel>\n                <FormControl>\n                  <FileUpload\n                    onChange={field.onChange}\n                    value={field.value}\n                    onRemove={field.onChange}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"githubUrl\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>GitHub URL</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"url\"\n                    disabled={loading}\n                    placeholder=\"https://github.com/your-repository\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <div className=\"gap-8 md:grid md:grid-cols-3\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={loading}\n                      placeholder=\"Project name\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={loading}\n                      placeholder=\"Project description\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <Button disabled={loading} className=\"ml-auto\" type=\"submit\">\n            {action}\n          </Button>\n        </form>\n      </Form>\n    </>\n  );\n};\n",
            "components\\forms\\user-auth-form.tsx": "// components/forms/user-auth-form.tsx\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\nimport UserRegisterForm from \"./user-register-form\"\nimport UserLoginForm from \"./user-login-form\"\nimport GithubSignInButton from '../github-auth-button';\n\ninterface UserAuthFormProps {\n  onFormChange: (showRegisterForm: boolean) => void;\n}\n\nexport default function UserAuthForm({ onFormChange }: UserAuthFormProps) {\n  const [showRegisterForm, setShowRegisterForm] = useState(false); // State to handle form switch\n  const [loading, setLoading] = useState(false); // Handle loading state\n\n  const handleRegisterClick = () => {\n    setShowRegisterForm(true); // Show registration form\n    onFormChange(true); // Notify parent to show registration form\n  };\n\n  const handleLoginClick = () => {\n    setShowRegisterForm(false); // Hide registration form\n    onFormChange(false); // Notify parent to show login form\n  };\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      {showRegisterForm ? (\n        <>\n          <UserRegisterForm /> {/* Show registration form if needed */}\n          <Button\n            className=\"hover:bg-beige mt-4 w-full border border-black bg-white text-black\"\n            onClick={handleLoginClick}\n            disabled={loading}\n          >\n            Back to Login\n          </Button>\n        </>\n      ) : (\n        <>\n          <UserLoginForm /> {/* Show login form if needed */}\n          <Button\n            className=\"hover:bg-beige mt-4 w-full border border-black bg-white text-black\"\n            onClick={handleRegisterClick}\n            disabled={loading}\n          >\n            Register\n          </Button>\n        </>\n      )}\n      <div className=\"relative mt-4\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <span className=\"w-full border-t\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-background px-2 text-muted-foreground\">\n            Or continue with\n          </span>\n        </div>\n      </div>\n      <GithubSignInButton />\n    </div>\n  );\n}\n",
            "components\\forms\\user-login-form.tsx": "// components/forms/user-login-form.tsx\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '@/firebaseConfig';\nimport { useRouter } from 'next/navigation';\nimport FullScreenLoader from '../ui/fullScreenLoader';\n\nconst formSchema = z.object({\n  email: z.string().email({ message: 'Enter a valid email address' }),\n  password: z.string().min(6, { message: 'Password should be at least 6 characters long' }),\n});\n\ntype LoginFormValue = z.infer<typeof formSchema>;\n\nexport default function UserLoginForm() {\n  const [loading, setLoading] = useState(false);\n  const [showFullScreenLoader, setShowFullScreenLoader] = useState(false); // Full screen loader state\n  const [error, setError] = useState<string | null>(null);\n  const form = useForm<LoginFormValue>({ resolver: zodResolver(formSchema) });\n  const router = useRouter();\n\n  const onSubmit = async (data: LoginFormValue) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, data.email, data.password);\n      console.log('User logged in:', userCredential.user);\n\n      // Show the full-screen loader\n      setShowFullScreenLoader(true);\n\n      // Redirect to the dashboard after a slight delay to ensure the loading animation is visible\n      setTimeout(() => {\n        router.push('/dashboard');\n      }, 500); // Adjust the delay as needed\n    } catch (error) {\n      console.error('Error logging in:', error);\n      setError('Login failed. Please check your credentials and try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      {showFullScreenLoader && <FullScreenLoader />} {/* Show loader if needed */}\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-full space-y-2\">\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input type=\"email\" placeholder=\"Enter your email\" disabled={loading} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Password</FormLabel>\n                <FormControl>\n                  <Input type=\"password\" placeholder=\"Enter your password\" disabled={loading} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button disabled={loading} className=\"ml-auto w-full\" type=\"submit\">\n            Login\n          </Button>\n        </form>\n        {error && <p className=\"text-red-500\">{error}</p>}\n      </Form>\n    </>\n  );\n}\n",
            "components\\forms\\user-register-form.tsx": "// components/forms/user-register-form.tsx\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as z from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\nimport { auth, firestore } from '../../firebaseConfig';\nimport { useRouter } from 'next/navigation'; // Import useRouter\nimport { doc, setDoc, Timestamp } from 'firebase/firestore'; // Import Firestore functions\nimport FullScreenLoader from '@/components/ui/FullScreenLoader'; // Import FullScreenLoader\n\nconst formSchema = z.object({\n  fullName: z.string().min(1, { message: 'Full name is required' }),\n  company: z.string().min(1, { message: 'Company name is required' }),\n  email: z.string().email({ message: 'Enter a valid email address' }),\n  password: z.string().min(6, { message: 'Password should be at least 6 characters long' })\n});\n\ntype RegisterFormValue = z.infer<typeof formSchema>;\n\nexport default function UserRegisterForm() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showFullScreenLoader, setShowFullScreenLoader] = useState(false); // Full screen loader state\n  const form = useForm<RegisterFormValue>({\n    resolver: zodResolver(formSchema)\n  });\n  const router = useRouter(); // Initialize useRouter\n\n  const onSubmit = async (data: RegisterFormValue) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Create user with email and password\n      const userCredential = await createUserWithEmailAndPassword(auth, data.email, data.password);\n      // Update user profile with display name\n      await updateProfile(userCredential.user, {\n        displayName: data.fullName\n      });\n\n      // Add user data to Firestore\n      await setDoc(doc(firestore, 'users', userCredential.user.uid), {\n        fullName: data.fullName,\n        email: data.email,\n        company: data.company,\n        createdAt: Timestamp.now() // Timestamp of the document creation\n      });\n\n      // Log the registered user\n      console.log('User registered:', userCredential.user);\n\n      // Show the full-screen loader\n      setShowFullScreenLoader(true);\n\n      // Redirect to the dashboard after a slight delay to ensure the loading animation is visible\n      setTimeout(() => {\n        router.push('/dashboard');\n      }, 500); // Adjust the delay as needed\n    } catch (error) {\n      console.error('Error registering user:', error);\n      setError('Registration failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      {showFullScreenLoader && <FullScreenLoader message=\"Registering...\" />} {/* Show loader if needed */}\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-full space-y-2\">\n          <FormField\n            control={form.control}\n            name=\"fullName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Full Name</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"Enter your full name\"\n                    disabled={loading}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"company\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Company</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"Enter your company name\"\n                    disabled={loading}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    disabled={loading}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Password</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    disabled={loading}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button disabled={loading} className=\"ml-auto w-full\" type=\"submit\">\n            Register\n          </Button>\n        </form>\n        {error && <p className=\"text-red-500\">{error}</p>}\n      </Form>\n    </>\n  );\n}\n",
            "components\\kanban\\board-column.tsx": "import { Task } from '@/lib/store';\nimport { useDndContext, type UniqueIdentifier } from '@dnd-kit/core';\nimport { SortableContext, useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { cva } from 'class-variance-authority';\nimport { GripVertical } from 'lucide-react';\nimport { useMemo } from 'react';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader } from '../ui/card';\nimport { ColumnActions } from './column-action';\nimport { TaskCard } from './task-card';\nimport { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';\n\nexport interface Column {\n  id: UniqueIdentifier;\n  title: string;\n}\n\nexport type ColumnType = 'Column';\n\nexport interface ColumnDragData {\n  type: ColumnType;\n  column: Column;\n}\n\ninterface BoardColumnProps {\n  column: Column;\n  tasks: Task[];\n  isOverlay?: boolean;\n}\n\nexport function BoardColumn({ column, tasks, isOverlay }: BoardColumnProps) {\n  const tasksIds = useMemo(() => {\n    return tasks.map((task) => task.id);\n  }, [tasks]);\n\n  const {\n    setNodeRef,\n    attributes,\n    listeners,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: column.id,\n    data: {\n      type: 'Column',\n      column\n    } satisfies ColumnDragData,\n    attributes: {\n      roleDescription: `Column: ${column.title}`\n    }\n  });\n\n  const style = {\n    transition,\n    transform: CSS.Translate.toString(transform)\n  };\n\n  const variants = cva(\n    'h-[75vh] max-h-[75vh] w-[350px] max-w-full bg-secondary flex flex-col flex-shrink-0 snap-center',\n    {\n      variants: {\n        dragging: {\n          default: 'border-2 border-transparent',\n          over: 'ring-2 opacity-30',\n          overlay: 'ring-2 ring-primary'\n        }\n      }\n    }\n  );\n\n  return (\n    <Card\n      ref={setNodeRef}\n      style={style}\n      className={variants({\n        dragging: isOverlay ? 'overlay' : isDragging ? 'over' : undefined\n      })}\n    >\n      <CardHeader className=\"space-between flex flex-row items-center border-b-2 p-4 text-left font-semibold\">\n        <Button\n          variant={'ghost'}\n          {...attributes}\n          {...listeners}\n          className=\" relative -ml-2 h-auto cursor-grab p-1 text-primary/50\"\n        >\n          <span className=\"sr-only\">{`Move column: ${column.title}`}</span>\n          <GripVertical />\n        </Button>\n        {/* <span className=\"mr-auto !mt-0\"> {column.title}</span> */}\n        {/* <Input\n          defaultValue={column.title}\n          className=\"text-base !mt-0 mr-auto\"\n        /> */}\n        <ColumnActions id={column.id} title={column.title} />\n      </CardHeader>\n      <CardContent className=\"flex flex-grow flex-col gap-4 overflow-x-hidden p-2\">\n        <ScrollArea className=\"h-full\">\n          <SortableContext items={tasksIds}>\n            {tasks.map((task) => (\n              <TaskCard key={task.id} task={task} />\n            ))}\n          </SortableContext>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function BoardContainer({ children }: { children: React.ReactNode }) {\n  const dndContext = useDndContext();\n\n  const variations = cva('px-2  pb-4 md:px-0 flex lg:justify-start', {\n    variants: {\n      dragging: {\n        default: '',\n        active: 'snap-none'\n      }\n    }\n  });\n\n  return (\n    <ScrollArea className=\"w-full whitespace-nowrap rounded-md\">\n      <div\n        className={variations({\n          dragging: dndContext.active ? 'active' : 'default'\n        })}\n      >\n        <div className=\"flex flex-row items-start justify-center gap-4\">\n          {children}\n        </div>\n      </div>\n      <ScrollBar orientation=\"horizontal\" />\n    </ScrollArea>\n  );\n}\n",
            "components\\kanban\\column-action.tsx": "'use client';\nimport { DotsHorizontalIcon } from '@radix-ui/react-icons';\nimport * as React from 'react';\n\nimport {\n  AlertDialog,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\nimport { useToast } from '@/components/ui/use-toast';\nimport { useTaskStore } from '@/lib/store';\nimport { UniqueIdentifier } from '@dnd-kit/core';\nimport { Input } from '../ui/input';\n\nexport function ColumnActions({\n  title,\n  id\n}: {\n  title: string;\n  id: UniqueIdentifier;\n}) {\n  const [open, setIsOpen] = React.useState(false);\n  const [name, setName] = React.useState(title);\n  const updateCol = useTaskStore((state) => state.updateCol);\n  const removeCol = useTaskStore((state) => state.removeCol);\n  const [editDisable, setIsEditDisable] = React.useState(true);\n  const [showDeleteDialog, setShowDeleteDialog] = React.useState(false);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  return (\n    <>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          setIsEditDisable(!editDisable);\n          updateCol(id, name);\n          toast({\n            title: 'Name Updated',\n            variant: 'default',\n            description: `${title} updated to ${name}`\n          });\n        }}\n      >\n        <Input\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          className=\"!mt-0 mr-auto text-base disabled:cursor-pointer disabled:border-none disabled:opacity-100\"\n          disabled={editDisable}\n          ref={inputRef}\n        />\n      </form>\n      <DropdownMenu modal={false}>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"secondary\" className=\"ml-1\">\n            <span className=\"sr-only\">Actions</span>\n            <DotsHorizontalIcon className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem\n            onSelect={() => {\n              setIsEditDisable(!editDisable);\n              setTimeout(() => {\n                inputRef.current && inputRef.current?.focus();\n              }, 500);\n            }}\n          >\n            Rename\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n\n          <DropdownMenuItem\n            onSelect={() => setShowDeleteDialog(true)}\n            className=\"text-red-600\"\n          >\n            Delete Section\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>\n              Are you sure want to delete column?\n            </AlertDialogTitle>\n            <AlertDialogDescription>\n              NOTE: All tasks related to this category will also be deleted.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <Button\n              variant=\"destructive\"\n              onClick={() => {\n                // yes, you have to set a timeout\n                setTimeout(() => (document.body.style.pointerEvents = ''), 100);\n\n                setShowDeleteDialog(false);\n                removeCol(id);\n                toast({\n                  description: 'This column has been deleted.'\n                });\n              }}\n            >\n              Delete\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n",
            "components\\kanban\\kanban-board.tsx": "'use client';\nimport { Fragment, useEffect, useMemo, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { Task, useTaskStore } from '@/lib/store';\nimport { hasDraggableData } from '@/lib/utils';\nimport {\n  Announcements,\n  DndContext,\n  DragOverlay,\n  MouseSensor,\n  TouchSensor,\n  UniqueIdentifier,\n  useSensor,\n  useSensors,\n  type DragEndEvent,\n  type DragOverEvent,\n  type DragStartEvent\n} from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport type { Column } from './board-column';\nimport { BoardColumn, BoardContainer } from './board-column';\nimport NewSectionDialog from './new-section-dialog';\nimport { TaskCard } from './task-card';\n// import { coordinateGetter } from \"./multipleContainersKeyboardPreset\";\n\nconst defaultCols = [\n  {\n    id: 'TODO' as const,\n    title: 'Todo'\n  },\n  {\n    id: 'IN_PROGRESS' as const,\n    title: 'In progress'\n  },\n  {\n    id: 'DONE' as const,\n    title: 'Done'\n  }\n] satisfies Column[];\n\nexport type ColumnId = (typeof defaultCols)[number]['id'];\n\nexport function KanbanBoard() {\n  // const [columns, setColumns] = useState<Column[]>(defaultCols);\n  const columns = useTaskStore((state) => state.columns);\n  const setColumns = useTaskStore((state) => state.setCols);\n  const pickedUpTaskColumn = useRef<ColumnId | null>(null);\n  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\n\n  // const [tasks, setTasks] = useState<Task[]>(initialTasks);\n  const tasks = useTaskStore((state) => state.tasks);\n  const setTasks = useTaskStore((state) => state.setTasks);\n  const [activeColumn, setActiveColumn] = useState<Column | null>(null);\n  const [isMounted, setIsMounted] = useState<Boolean>(false);\n\n  const [activeTask, setActiveTask] = useState<Task | null>(null);\n\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(TouchSensor)\n    // useSensor(KeyboardSensor, {\n    //   coordinateGetter: coordinateGetter,\n    // }),\n  );\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, [isMounted]);\n\n  useEffect(() => {\n    useTaskStore.persist.rehydrate();\n  }, []);\n  if (!isMounted) return;\n\n  function getDraggingTaskData(taskId: UniqueIdentifier, columnId: ColumnId) {\n    const tasksInColumn = tasks.filter((task) => task.status === columnId);\n    const taskPosition = tasksInColumn.findIndex((task) => task.id === taskId);\n    const column = columns.find((col) => col.id === columnId);\n    return {\n      tasksInColumn,\n      taskPosition,\n      column\n    };\n  }\n\n  const announcements: Announcements = {\n    onDragStart({ active }) {\n      if (!hasDraggableData(active)) return;\n      if (active.data.current?.type === 'Column') {\n        const startColumnIdx = columnsId.findIndex((id) => id === active.id);\n        const startColumn = columns[startColumnIdx];\n        return `Picked up Column ${startColumn?.title} at position: ${\n          startColumnIdx + 1\n        } of ${columnsId.length}`;\n      } else if (active.data.current?.type === 'Task') {\n        pickedUpTaskColumn.current = active.data.current.task.status;\n        const { tasksInColumn, taskPosition, column } = getDraggingTaskData(\n          active.id,\n          pickedUpTaskColumn.current\n        );\n        return `Picked up Task ${active.data.current.task.title} at position: ${\n          taskPosition + 1\n        } of ${tasksInColumn.length} in column ${column?.title}`;\n      }\n    },\n    onDragOver({ active, over }) {\n      if (!hasDraggableData(active) || !hasDraggableData(over)) return;\n\n      if (\n        active.data.current?.type === 'Column' &&\n        over.data.current?.type === 'Column'\n      ) {\n        const overColumnIdx = columnsId.findIndex((id) => id === over.id);\n        return `Column ${active.data.current.column.title} was moved over ${\n          over.data.current.column.title\n        } at position ${overColumnIdx + 1} of ${columnsId.length}`;\n      } else if (\n        active.data.current?.type === 'Task' &&\n        over.data.current?.type === 'Task'\n      ) {\n        const { tasksInColumn, taskPosition, column } = getDraggingTaskData(\n          over.id,\n          over.data.current.task.status\n        );\n        if (over.data.current.task.status !== pickedUpTaskColumn.current) {\n          return `Task ${\n            active.data.current.task.title\n          } was moved over column ${column?.title} in position ${\n            taskPosition + 1\n          } of ${tasksInColumn.length}`;\n        }\n        return `Task was moved over position ${taskPosition + 1} of ${\n          tasksInColumn.length\n        } in column ${column?.title}`;\n      }\n    },\n    onDragEnd({ active, over }) {\n      if (!hasDraggableData(active) || !hasDraggableData(over)) {\n        pickedUpTaskColumn.current = null;\n        return;\n      }\n      if (\n        active.data.current?.type === 'Column' &&\n        over.data.current?.type === 'Column'\n      ) {\n        const overColumnPosition = columnsId.findIndex((id) => id === over.id);\n\n        return `Column ${\n          active.data.current.column.title\n        } was dropped into position ${overColumnPosition + 1} of ${\n          columnsId.length\n        }`;\n      } else if (\n        active.data.current?.type === 'Task' &&\n        over.data.current?.type === 'Task'\n      ) {\n        const { tasksInColumn, taskPosition, column } = getDraggingTaskData(\n          over.id,\n          over.data.current.task.status\n        );\n        if (over.data.current.task.status !== pickedUpTaskColumn.current) {\n          return `Task was dropped into column ${column?.title} in position ${\n            taskPosition + 1\n          } of ${tasksInColumn.length}`;\n        }\n        return `Task was dropped into position ${taskPosition + 1} of ${\n          tasksInColumn.length\n        } in column ${column?.title}`;\n      }\n      pickedUpTaskColumn.current = null;\n    },\n    onDragCancel({ active }) {\n      pickedUpTaskColumn.current = null;\n      if (!hasDraggableData(active)) return;\n      return `Dragging ${active.data.current?.type} cancelled.`;\n    }\n  };\n\n  return (\n    <DndContext\n      accessibility={{\n        announcements\n      }}\n      sensors={sensors}\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n      onDragOver={onDragOver}\n    >\n      <BoardContainer>\n        <SortableContext items={columnsId}>\n          {columns?.map((col, index) => (\n            <Fragment key={col.id}>\n              <BoardColumn\n                column={col}\n                tasks={tasks.filter((task) => task.status === col.id)}\n              />\n              {index === columns?.length - 1 && (\n                <div className=\"w-[300px]\">\n                  <NewSectionDialog />\n                </div>\n              )}\n            </Fragment>\n          ))}\n          {!columns.length && <NewSectionDialog />}\n        </SortableContext>\n      </BoardContainer>\n\n      {'document' in window &&\n        createPortal(\n          <DragOverlay>\n            {activeColumn && (\n              <BoardColumn\n                isOverlay\n                column={activeColumn}\n                tasks={tasks.filter((task) => task.status === activeColumn.id)}\n              />\n            )}\n            {activeTask && <TaskCard task={activeTask} isOverlay />}\n          </DragOverlay>,\n          document.body\n        )}\n    </DndContext>\n  );\n\n  function onDragStart(event: DragStartEvent) {\n    if (!hasDraggableData(event.active)) return;\n    const data = event.active.data.current;\n    if (data?.type === 'Column') {\n      setActiveColumn(data.column);\n      return;\n    }\n\n    if (data?.type === 'Task') {\n      setActiveTask(data.task);\n      return;\n    }\n  }\n\n  function onDragEnd(event: DragEndEvent) {\n    setActiveColumn(null);\n    setActiveTask(null);\n\n    const { active, over } = event;\n    if (!over) return;\n\n    const activeId = active.id;\n    const overId = over.id;\n\n    if (!hasDraggableData(active)) return;\n\n    const activeData = active.data.current;\n\n    if (activeId === overId) return;\n\n    const isActiveAColumn = activeData?.type === 'Column';\n    if (!isActiveAColumn) return;\n\n    const activeColumnIndex = columns.findIndex((col) => col.id === activeId);\n\n    const overColumnIndex = columns.findIndex((col) => col.id === overId);\n\n    setColumns(arrayMove(columns, activeColumnIndex, overColumnIndex));\n  }\n\n  function onDragOver(event: DragOverEvent) {\n    const { active, over } = event;\n    if (!over) return;\n\n    const activeId = active.id;\n    const overId = over.id;\n\n    if (activeId === overId) return;\n\n    if (!hasDraggableData(active) || !hasDraggableData(over)) return;\n\n    const activeData = active.data.current;\n    const overData = over.data.current;\n\n    const isActiveATask = activeData?.type === 'Task';\n    const isOverATask = activeData?.type === 'Task';\n\n    if (!isActiveATask) return;\n\n    // Im dropping a Task over another Task\n    if (isActiveATask && isOverATask) {\n      const activeIndex = tasks.findIndex((t) => t.id === activeId);\n      const overIndex = tasks.findIndex((t) => t.id === overId);\n      const activeTask = tasks[activeIndex];\n      const overTask = tasks[overIndex];\n      if (activeTask && overTask && activeTask.status !== overTask.status) {\n        activeTask.status = overTask.status;\n        setTasks(arrayMove(tasks, activeIndex, overIndex - 1));\n      }\n\n      setTasks(arrayMove(tasks, activeIndex, overIndex));\n    }\n\n    const isOverAColumn = overData?.type === 'Column';\n\n    // Im dropping a Task over a column\n    if (isActiveATask && isOverAColumn) {\n      const activeIndex = tasks.findIndex((t) => t.id === activeId);\n      const activeTask = tasks[activeIndex];\n      if (activeTask) {\n        activeTask.status = overId as ColumnId;\n        setTasks(arrayMove(tasks, activeIndex, activeIndex));\n      }\n    }\n  }\n}\n",
            "components\\kanban\\new-section-dialog.tsx": "'use client';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\n\nimport { useTaskStore } from '@/lib/store';\n\nexport default function NewSectionDialog() {\n  const addCol = useTaskStore((state) => state.addCol);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const formData = new FormData(form);\n    const { title } = Object.fromEntries(formData);\n\n    if (typeof title !== 'string') return;\n    addCol(title);\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"secondary\" size=\"lg\" className=\"w-full\">\n          \uff0b Add New Section\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Section</DialogTitle>\n          <DialogDescription>\n            What section you want to add today?\n          </DialogDescription>\n        </DialogHeader>\n        <form\n          id=\"todo-form\"\n          className=\"grid gap-4 py-4\"\n          onSubmit={handleSubmit}\n        >\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Input\n              id=\"title\"\n              name=\"title\"\n              placeholder=\"Section title...\"\n              className=\"col-span-4\"\n            />\n          </div>\n        </form>\n        <DialogFooter>\n          <DialogTrigger asChild>\n            <Button type=\"submit\" size=\"sm\" form=\"todo-form\">\n              Add Section\n            </Button>\n          </DialogTrigger>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
            "components\\kanban\\new-task-dialog.tsx": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '../ui/textarea';\n\nimport { useTaskStore } from '@/lib/store';\n\nexport default function NewTaskDialog() {\n  const addTask = useTaskStore((state) => state.addTask);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const formData = new FormData(form);\n    const { title, description } = Object.fromEntries(formData);\n\n    if (typeof title !== 'string' || typeof description !== 'string') return;\n    addTask(title, description);\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"secondary\" size=\"sm\">\n          \uff0b Add New Todo\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Todo</DialogTitle>\n          <DialogDescription>\n            What do you want to get done today?\n          </DialogDescription>\n        </DialogHeader>\n        <form\n          id=\"todo-form\"\n          className=\"grid gap-4 py-4\"\n          onSubmit={handleSubmit}\n        >\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Input\n              id=\"title\"\n              name=\"title\"\n              placeholder=\"Todo title...\"\n              className=\"col-span-4\"\n            />\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Textarea\n              id=\"description\"\n              name=\"description\"\n              placeholder=\"Description...\"\n              className=\"col-span-4\"\n            />\n          </div>\n        </form>\n        <DialogFooter>\n          <DialogTrigger asChild>\n            <Button type=\"submit\" size=\"sm\" form=\"todo-form\">\n              Add Todo\n            </Button>\n          </DialogTrigger>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
            "components\\kanban\\task-card.tsx": "import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Task } from '@/lib/store';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { cva } from 'class-variance-authority';\nimport { GripVertical } from 'lucide-react';\nimport { Badge } from '../ui/badge';\n\n// export interface Task {\n//   id: UniqueIdentifier;\n//   columnId: ColumnId;\n//   content: string;\n// }\n\ninterface TaskCardProps {\n  task: Task;\n  isOverlay?: boolean;\n}\n\nexport type TaskType = 'Task';\n\nexport interface TaskDragData {\n  type: TaskType;\n  task: Task;\n}\n\nexport function TaskCard({ task, isOverlay }: TaskCardProps) {\n  const {\n    setNodeRef,\n    attributes,\n    listeners,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: task.id,\n    data: {\n      type: 'Task',\n      task\n    } satisfies TaskDragData,\n    attributes: {\n      roleDescription: 'Task'\n    }\n  });\n\n  const style = {\n    transition,\n    transform: CSS.Translate.toString(transform)\n  };\n\n  const variants = cva('', {\n    variants: {\n      dragging: {\n        over: 'ring-2 opacity-30',\n        overlay: 'ring-2 ring-primary'\n      }\n    }\n  });\n\n  return (\n    <Card\n      ref={setNodeRef}\n      style={style}\n      className={variants({\n        dragging: isOverlay ? 'overlay' : isDragging ? 'over' : undefined\n      })}\n    >\n      <CardHeader className=\"space-between relative flex flex-row border-b-2 border-secondary px-3 py-3\">\n        <Button\n          variant={'ghost'}\n          {...attributes}\n          {...listeners}\n          className=\"-ml-2 h-auto cursor-grab p-1 text-secondary-foreground/50\"\n        >\n          <span className=\"sr-only\">Move task</span>\n          <GripVertical />\n        </Button>\n        <Badge variant={'outline'} className=\"ml-auto font-semibold\">\n          Task\n        </Badge>\n      </CardHeader>\n      <CardContent className=\"whitespace-pre-wrap px-3 pb-6 pt-3 text-left\">\n        {task.title}\n      </CardContent>\n    </Card>\n  );\n}\n",
            "components\\layout\\header.tsx": "import ThemeToggle from '@/components/layout/ThemeToggle/theme-toggle';\nimport { cn } from '@/lib/utils';\nimport { MobileSidebar } from './mobile-sidebar';\nimport { UserNav } from './user-nav';\n\nexport default function Header() {\n  return (\n    <header className=\"sticky inset-x-0 top-0 w-full\">\n      <nav className=\"flex items-center justify-between px-4 py-2 md:justify-end\">\n        <div className={cn('block lg:!hidden')}>\n          <MobileSidebar />\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <UserNav />\n          <ThemeToggle />\n        </div>\n      </nav>\n    </header>\n  );\n}\n",
            "components\\layout\\mobile-sidebar.tsx": "'use client';\nimport { DashboardNav } from '@/components/dashboard-nav';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { navItems } from '@/constants/data';\nimport { MenuIcon } from 'lucide-react';\nimport { useState } from 'react';\n\n// import { Playlist } from \"../data/playlists\";\n\ninterface SidebarProps extends React.HTMLAttributes<HTMLDivElement> {\n  // playlists: Playlist[];\n}\n\nexport function MobileSidebar({ className }: SidebarProps) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Sheet open={open} onOpenChange={setOpen}>\n        <SheetTrigger asChild>\n          <MenuIcon />\n        </SheetTrigger>\n        <SheetContent side=\"left\" className=\"!px-0\">\n          <div className=\"space-y-4 py-4\">\n            <div className=\"px-3 py-2\">\n              <h2 className=\"mb-2 px-4 text-lg font-semibold tracking-tight\">\n                Overview\n              </h2>\n              <div className=\"space-y-1\">\n                <DashboardNav\n                  items={navItems}\n                  isMobileNav={true}\n                  setOpen={setOpen}\n                />\n              </div>\n            </div>\n          </div>\n        </SheetContent>\n      </Sheet>\n    </>\n  );\n}\n",
            "components\\layout\\page-container copy.tsx": "import React from 'react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\nexport default function PageContainer({\n  children,\n  scrollable = false\n}: {\n  children: React.ReactNode;\n  scrollable?: boolean;\n}) {\n  return (\n    <>\n      {scrollable ? (\n        <ScrollArea className=\"h-[calc(100dvh-52px)]\">\n          <div className=\"h-full  p-4 md:px-8\">{children}</div>\n        </ScrollArea>\n      ) : (\n        <div className=\"h-full  p-4 md:px-8\">{children}</div>\n      )}\n    </>\n  );\n}\n",
            "components\\layout\\page-container.tsx": "import React from 'react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\nexport default function PageContainer({\n  children,\n  scrollable = false\n}: {\n  children: React.ReactNode;\n  scrollable?: boolean;\n}) {\n  return (\n    <div className=\"flex flex-col h-[calc(100vh-52px)]\"> {/* Adjust 52px if needed */}\n      {scrollable ? (\n        <ScrollArea className=\"flex-1\">\n          <div className=\"p-4 md:px-8\">\n            {children}\n          </div>\n        </ScrollArea>\n      ) : (\n        <div className=\"flex-1 overflow-auto p-4 md:px-8\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n}",
            "components\\layout\\providers.tsx": "'use client';\nimport React from 'react';\nimport ThemeProvider from './ThemeToggle/theme-provider';\nimport { SessionProvider, SessionProviderProps } from 'next-auth/react';\nexport default function Providers({\n  session,\n  children\n}: {\n  session: SessionProviderProps['session'];\n  children: React.ReactNode;\n}) {\n  return (\n    <>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem>\n        <SessionProvider session={session}>{children}</SessionProvider>\n      </ThemeProvider>\n    </>\n  );\n}\n",
            "components\\layout\\sidebar.tsx": "'use client';\n\nimport React from 'react';\nimport { usePathname } from 'next/navigation';\nimport { DashboardNav } from '../dashboard-nav';\nimport { navItems } from '@/constants/data';\nimport { cn } from '@/lib/utils';\nimport { ChevronLeft } from 'lucide-react';\nimport { useSidebar } from '@/hooks/useSidebar';\nimport Link from 'next/link';\n\ntype SidebarProps = {\n  className?: string;\n};\n\nconst baseProjectNavItems = [\n  {\n    title: 'Back to Projects',\n    href: '/projects',\n    icon: \"ArrowLeft\",\n    label: 'Back to Projects'\n  },\n  {\n    title: 'General Information',\n    slug: 'general',\n    icon: \"BadgeInfo\",\n    label: 'General Information'\n  },\n  {\n    title: 'Code Structure',\n    slug: 'code-structure',\n    icon: \"Code\",\n    label: 'Code Structure'\n  },\n  {\n    title: 'Components and Modules',\n    slug: 'components',\n    icon: \"Box\",\n    label: 'Components and Modules'\n  },\n  {\n    title: 'Build and Dev Process',\n    slug: 'build-process',\n    icon: \"Wrench\",\n    label: 'Build and Dev Process'\n  },\n  {\n    title: 'Code Explorer',\n    slug: 'code-explorer',\n    icon: \"Sparkle\",\n    label: 'Code Explorer'\n  },\n  {\n    title: 'Q&A',\n    slug: 'qa',\n    icon: \"HelpCircle\",\n    label: 'Q&A'\n  }\n];\n\nexport default function Sidebar({ className }: SidebarProps) {\n  const { isMinimized, toggle } = useSidebar();\n  const pathname = usePathname() || ''; // Ensure pathname is defined\n\n  // Determine if we're on a project page and not on the \"/projects/new\" page\n  const isProjectPage = pathname.startsWith('/projects/') && pathname !== '/projects/new';\n  \n  // Extract project ID from the pathname\n  const projectId = isProjectPage ? pathname.split('/')[2] : '';\n\n  const handleToggle = () => {\n    toggle();\n  };\n\n  // Generate project-specific navigation items\n  const projectNavItems = baseProjectNavItems.map(item => ({\n    ...item,\n    href: item.slug ? `/projects/${projectId}/${item.slug}` : item.href\n  }));\n\n  return (\n    <aside\n      className={cn(\n        `relative hidden h-screen flex-none border-r bg-card transition-[width] duration-500 md:block`,\n        !isMinimized ? 'w-72' : 'w-[72px]',\n        className\n      )}\n    >\n      <div className=\"hidden p-5 pt-10 lg:block\">\n        <Link\n          href={'https://github.com/Kiranism/next-shadcn-dashboard-starter'}\n          target=\"_blank\"\n        >\n          <div className=\"flex items-center\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"mr-2 h-6 w-6\"\n            >\n              <path d=\"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3\" />\n            </svg>\n            {!isMinimized && <span className=\"text-xl font-bold\">NovaCode</span>}\n          </div>\n        </Link>\n      </div>\n      <ChevronLeft\n        className={cn(\n          'absolute -right-3 top-10 z-50 cursor-pointer rounded-full border bg-background text-3xl text-foreground',\n          isMinimized && 'rotate-180'\n        )}\n        onClick={handleToggle}\n      />\n      <div className=\"space-y-4 py-4\">\n        <div className=\"px-3 py-2\">\n          <div className=\"mt-3 space-y-1\">\n            <DashboardNav items={pathname === '/projects/new' ? navItems : (isProjectPage ? projectNavItems : navItems)} />\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n",
            "components\\layout\\user-nav.tsx": "'use client';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\nimport { signOut, useSession } from 'next-auth/react';\nexport function UserNav() {\n  const { data: session } = useSession();\n  if (session) {\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage\n                src={session.user?.image ?? ''}\n                alt={session.user?.name ?? ''}\n              />\n              <AvatarFallback>{session.user?.name?.[0]}</AvatarFallback>\n            </Avatar>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n          <DropdownMenuLabel className=\"font-normal\">\n            <div className=\"flex flex-col space-y-1\">\n              <p className=\"text-sm font-medium leading-none\">\n                {session.user?.name}\n              </p>\n              <p className=\"text-xs leading-none text-muted-foreground\">\n                {session.user?.email}\n              </p>\n            </div>\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          <DropdownMenuGroup>\n            <DropdownMenuItem>\n              Profile\n              <DropdownMenuShortcut>\u21e7\u2318P</DropdownMenuShortcut>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              Billing\n              <DropdownMenuShortcut>\u2318B</DropdownMenuShortcut>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              Settings\n              <DropdownMenuShortcut>\u2318S</DropdownMenuShortcut>\n            </DropdownMenuItem>\n            <DropdownMenuItem>New Team</DropdownMenuItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => signOut()}>\n            Log out\n            <DropdownMenuShortcut>\u21e7\u2318Q</DropdownMenuShortcut>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  }\n}\n",
            "components\\layout\\ThemeToggle\\theme-provider.tsx": "'use client';\n\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\nimport { type ThemeProviderProps } from 'next-themes/dist/types';\n\nexport default function ThemeProvider({\n  children,\n  ...props\n}: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n}\n",
            "components\\layout\\ThemeToggle\\theme-toggle.tsx": "'use client';\nimport { MoonIcon, SunIcon } from '@radix-ui/react-icons';\nimport { useTheme } from 'next-themes';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\ntype CompProps = {};\nexport default function ThemeToggle({}: CompProps) {\n  const { setTheme } = useTheme();\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <SunIcon className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <MoonIcon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme('light')}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('dark')}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('system')}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
            "components\\modal\\alert-modal.tsx": "'use client';\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Modal } from '@/components/ui/modal';\n\ninterface AlertModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  loading: boolean;\n}\n\nexport const AlertModal: React.FC<AlertModalProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  loading\n}) => {\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  if (!isMounted) {\n    return null;\n  }\n\n  return (\n    <Modal\n      title=\"Are you sure?\"\n      description=\"This action cannot be undone.\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"flex w-full items-center justify-end space-x-2 pt-6\">\n        <Button disabled={loading} variant=\"outline\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button disabled={loading} variant=\"destructive\" onClick={onConfirm}>\n          Continue\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n",
            "components\\tables\\employee-tables\\cell-action.tsx": "'use client';\nimport { AlertModal } from '@/components/modal/alert-modal';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\nimport { Employee } from '@/constants/data';\nimport { Edit, MoreHorizontal, Trash } from 'lucide-react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\ninterface CellActionProps {\n  data: Employee;\n}\n\nexport const CellAction: React.FC<CellActionProps> = ({ data }) => {\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const router = useRouter();\n\n  const onConfirm = async () => {};\n\n  return (\n    <>\n      <AlertModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        onConfirm={onConfirm}\n        loading={loading}\n      />\n      <DropdownMenu modal={false}>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n            <span className=\"sr-only\">Open menu</span>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n\n          <DropdownMenuItem\n            onClick={() => router.push(`/dashboard/user/${data.id}`)}\n          >\n            <Edit className=\"mr-2 h-4 w-4\" /> Update\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => setOpen(true)}>\n            <Trash className=\"mr-2 h-4 w-4\" /> Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n};\n",
            "components\\tables\\employee-tables\\columns.tsx": "'use client';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Employee } from '@/constants/data';\nimport { ColumnDef } from '@tanstack/react-table';\nimport { CellAction } from './cell-action';\n\nexport const columns: ColumnDef<Employee>[] = [\n  {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={table.getIsAllPageRowsSelected()}\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false\n  },\n  {\n    accessorKey: 'first_name',\n    header: 'NAME'\n  },\n  {\n    accessorKey: 'country',\n    header: 'COUNTRY'\n  },\n  {\n    accessorKey: 'email',\n    header: 'EMAIL'\n  },\n  {\n    accessorKey: 'job',\n    header: 'COMPANY'\n  },\n  {\n    accessorKey: 'gender',\n    header: 'GENDER'\n  },\n  {\n    id: 'actions',\n    cell: ({ row }) => <CellAction data={row.original} />\n  }\n];\n",
            "components\\tables\\project-tables\\cell-action.tsx": "'use client';\nimport { AlertModal } from '@/components/modal/alert-modal';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\nimport { User } from '@/constants/data';\nimport { Edit, MoreHorizontal, Trash } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\ninterface CellActionProps {\n  data: User;\n}\n\nexport const CellAction: React.FC<CellActionProps> = ({ data }) => {\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const router = useRouter();\n\n  const onConfirm = async () => {};\n\n  return (\n    <>\n      <AlertModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        onConfirm={onConfirm}\n        loading={loading}\n      />\n      <DropdownMenu modal={false}>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n            <span className=\"sr-only\">Open menu</span>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n\n          <DropdownMenuItem\n            onClick={() => router.push(`/dashboard/user/${data.id}`)}\n          >\n            <Edit className=\"mr-2 h-4 w-4\" /> Update\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => setOpen(true)}>\n            <Trash className=\"mr-2 h-4 w-4\" /> Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n};\n",
            "components\\tables\\project-tables\\client.tsx": "'use client';\nimport { Button } from '@/components/ui/button';\nimport { DataTable } from '@/components/ui/data-table';\nimport { Heading } from '@/components/ui/heading';\nimport { Separator } from '@/components/ui/separator';\nimport { Project } from '@/constants/data';\nimport { Plus } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { columns } from './columns';\n\ninterface ProductsClientProps {\n  data: Project[];\n}\n\nexport const ProjectClient: React.FC<ProductsClientProps> = ({ data }) => {\n  const router = useRouter();\n  console.log (data)\n\n  return (\n    <>\n      <div className=\"flex items-start justify-between\">\n        <Heading\n          title={`Projects (${data.length})`}\n          description=\"Manage projects\"\n        />\n        <Button\n          className=\"text-xs md:text-sm\"\n          onClick={() => router.push(`/projects/new`)}\n        >\n          <Plus className=\"mr-2 h-4 w-4\" /> Add New\n        </Button>\n      </div>\n      <Separator />\n      <DataTable searchKey=\"name\" columns={columns} data={data} />\n    </>\n  );\n};\n",
            "components\\tables\\project-tables\\columns.tsx": "'use client';\n\nimport { ColumnDef } from '@tanstack/react-table';\nimport { CellAction } from './cell-action';\nimport { User } from '@/constants/data';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { format } from 'date-fns'; // Import the format function from date-fns\n\nexport const columns: ColumnDef<User>[] = [\n  {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={table.getIsAllPageRowsSelected()}\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false\n  },\n  {\n    accessorKey: 'name',\n    header: 'NAME'\n  },\n  {\n    accessorKey: 'description',\n    header: 'DESCRIPTION'\n  },\n  {\n    accessorKey: 'createdAt',\n    header: 'UPLOADED',\n    cell: ({ getValue }) => {\n      const date = new Date(getValue() as number * 1000); // Convert from seconds to milliseconds\n      return format(date, 'dd/MM/yyyy'); // Format the date\n    }\n  },\n  {\n    id: 'actions',\n    cell: ({ row }) => <CellAction data={row.original} />\n  }\n];\n",
            "components\\tables\\user-tables\\cell-action.tsx": "'use client';\nimport { AlertModal } from '@/components/modal/alert-modal';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\nimport { User } from '@/constants/data';\nimport { Edit, MoreHorizontal, Trash } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\ninterface CellActionProps {\n  data: User;\n}\n\nexport const CellAction: React.FC<CellActionProps> = ({ data }) => {\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const router = useRouter();\n\n  const onConfirm = async () => {};\n\n  return (\n    <>\n      <AlertModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        onConfirm={onConfirm}\n        loading={loading}\n      />\n      <DropdownMenu modal={false}>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n            <span className=\"sr-only\">Open menu</span>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n\n          <DropdownMenuItem\n            onClick={() => router.push(`/dashboard/user/${data.id}`)}\n          >\n            <Edit className=\"mr-2 h-4 w-4\" /> Update\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => setOpen(true)}>\n            <Trash className=\"mr-2 h-4 w-4\" /> Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n};\n",
            "components\\tables\\user-tables\\client.tsx": "'use client';\nimport { Button } from '@/components/ui/button';\nimport { DataTable } from '@/components/ui/data-table';\nimport { Heading } from '@/components/ui/heading';\nimport { Separator } from '@/components/ui/separator';\nimport { User } from '@/constants/data';\nimport { Plus } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { columns } from './columns';\n\ninterface ProductsClientProps {\n  data: User[];\n}\n\nexport const UserClient: React.FC<ProductsClientProps> = ({ data }) => {\n  const router = useRouter();\n\n  return (\n    <>\n      <div className=\"flex items-start justify-between\">\n        <Heading\n          title={`Users (${data.length})`}\n          description=\"Manage users (Client side table functionalities.)\"\n        />\n        <Button\n          className=\"text-xs md:text-sm\"\n          onClick={() => router.push(`/dashboard/user/new`)}\n        >\n          <Plus className=\"mr-2 h-4 w-4\" /> Add New\n        </Button>\n      </div>\n      <Separator />\n      <DataTable searchKey=\"name\" columns={columns} data={data} />\n    </>\n  );\n};\n",
            "components\\tables\\user-tables\\columns.tsx": "'use client';\nimport { ColumnDef } from '@tanstack/react-table';\nimport { CellAction } from './cell-action';\nimport { User } from '@/constants/data';\nimport { Checkbox } from '@/components/ui/checkbox';\n\nexport const columns: ColumnDef<User>[] = [\n  {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={table.getIsAllPageRowsSelected()}\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false\n  },\n  {\n    accessorKey: 'name',\n    header: 'NAME'\n  },\n  {\n    accessorKey: 'company',\n    header: 'COMPANY'\n  },\n  {\n    accessorKey: 'role',\n    header: 'ROLE'\n  },\n  {\n    accessorKey: 'status',\n    header: 'STATUS'\n  },\n  {\n    id: 'actions',\n    cell: ({ row }) => <CellAction data={row.original} />\n  }\n];\n",
            "components\\ui\\accordion.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { ChevronDownIcon } from '@radix-ui/react-icons';\n\nimport { cn } from '@/lib/utils';\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn('border-b', className)}\n    {...props}\n  />\n));\nAccordionItem.displayName = 'AccordionItem';\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        'flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDownIcon className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n));\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn('pb-4 pt-0', className)}>{children}</div>\n  </AccordionPrimitive.Content>\n));\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
            "components\\ui\\alert-dialog.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/components/ui/button';\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col space-y-2 text-center sm:text-left',\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = 'AlertDialogHeader';\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = 'AlertDialogFooter';\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold', className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: 'outline' }),\n      'mt-2 sm:mt-0',\n      className\n    )}\n    onClick={() =>\n      // yes, you have to set a timeout\n      setTimeout(() => (document.body.style.pointerEvents = ''), 100)\n    }\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel\n};\n",
            "components\\ui\\alert.tsx": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst alertVariants = cva(\n  'relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7',\n  {\n    variants: {\n      variant: {\n        default: 'bg-background text-foreground',\n        destructive:\n          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n));\nAlert.displayName = 'Alert';\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn('mb-1 font-medium leading-none tracking-tight', className)}\n    {...props}\n  />\n));\nAlertTitle.displayName = 'AlertTitle';\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('text-sm [&_p]:leading-relaxed', className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = 'AlertDescription';\n\nexport { Alert, AlertTitle, AlertDescription };\n",
            "components\\ui\\avatar.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as AvatarPrimitive from '@radix-ui/react-avatar';\n\nimport { cn } from '@/lib/utils';\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',\n      className\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn('aspect-square h-full w-full', className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      'flex h-full w-full items-center justify-center rounded-full bg-muted',\n      className\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n",
            "components\\ui\\badge.tsx": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        destructive:\n          'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',\n        outline: 'text-foreground'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
            "components\\ui\\breadcrumb.tsx": "import * as React from 'react';\nimport { ChevronRightIcon, DotsHorizontalIcon } from '@radix-ui/react-icons';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport { cn } from '@/lib/utils';\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<'nav'> & {\n    separator?: React.ReactNode;\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />);\nBreadcrumb.displayName = 'Breadcrumb';\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<'ol'>\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',\n      className\n    )}\n    {...props}\n  />\n));\nBreadcrumbList.displayName = 'BreadcrumbList';\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<'li'>\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn('inline-flex items-center gap-1.5', className)}\n    {...props}\n  />\n));\nBreadcrumbItem.displayName = 'BreadcrumbItem';\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<'a'> & {\n    asChild?: boolean;\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'a';\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn('transition-colors hover:text-foreground', className)}\n      {...props}\n    />\n  );\n});\nBreadcrumbLink.displayName = 'BreadcrumbLink';\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<'span'>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn('font-normal text-foreground', className)}\n    {...props}\n  />\n));\nBreadcrumbPage.displayName = 'BreadcrumbPage';\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<'li'>) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn('[&>svg]:size-3.5', className)}\n    {...props}\n  >\n    {children ?? <ChevronRightIcon />}\n  </li>\n);\nBreadcrumbSeparator.displayName = 'BreadcrumbSeparator';\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn('flex h-9 w-9 items-center justify-center', className)}\n    {...props}\n  >\n    <DotsHorizontalIcon className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n);\nBreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis\n};\n",
            "components\\ui\\button.tsx": "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',\n        outline:\n          'border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline'\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'h-9 w-9'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default'\n    }\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n",
            "components\\ui\\calendar.tsx": "'use client';\n\nimport * as React from 'react';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@radix-ui/react-icons';\nimport { DayPicker } from 'react-day-picker';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/components/ui/button';\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n        month: 'space-y-4',\n        caption: 'flex justify-center pt-1 relative items-center',\n        caption_label: 'text-sm font-medium',\n        nav: 'space-x-1 flex items-center',\n        nav_button: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\n        ),\n        nav_button_previous: 'absolute left-1',\n        nav_button_next: 'absolute right-1',\n        table: 'w-full border-collapse space-y-1',\n        head_row: 'flex',\n        head_cell:\n          'text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]',\n        row: 'flex w-full mt-2',\n        cell: cn(\n          'relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent',\n          props.mode === 'range'\n            ? '[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md'\n            : '[&:has([aria-selected])]:rounded-md'\n        ),\n        day: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-8 w-8 p-0 font-normal aria-selected:opacity-100'\n        ),\n        day_range_start: 'day-range-start',\n        day_range_end: 'day-range-end',\n        day_selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\n        day_today: 'bg-accent text-accent-foreground',\n        day_outside: 'text-muted-foreground opacity-50',\n        day_disabled: 'text-muted-foreground opacity-50',\n        day_range_middle:\n          'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        day_hidden: 'invisible',\n        ...classNames\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeftIcon className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRightIcon className=\"h-4 w-4\" />\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = 'Calendar';\n\nexport { Calendar };\n",
            "components\\ui\\card.tsx": "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      'rounded-xl border bg-card text-card-foreground shadow',\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = 'Card';\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\n    {...props}\n  />\n));\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn('font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n));\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\n));\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex items-center p-6 pt-0', className)}\n    {...props}\n  />\n));\nCardFooter.displayName = 'CardFooter';\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent\n};\n",
            "components\\ui\\checkbox.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { CheckIcon } from '@radix-ui/react-icons';\n\nimport { cn } from '@/lib/utils';\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      'peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn('flex items-center justify-center text-current')}\n    >\n      <CheckIcon className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n));\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox };\n",
            "components\\ui\\collapsible.tsx": "'use client';\n\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\n\nconst Collapsible = CollapsiblePrimitive.Root;\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n",
            "components\\ui\\data-table.tsx": "'use client';\n\nimport { useRouter } from 'next/navigation';\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Input } from './input';\nimport { Button } from './button';\nimport { ScrollArea, ScrollBar } from './scroll-area';\nimport { RowDataProvider, useRowData } from '@/context/rowDataContext';\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n  searchKey: string;\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  searchKey,\n}: DataTableProps<TData, TValue>) {\n  const router = useRouter();\n  const { setRowData } = useRowData();\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n  });\n\n  const handleRowClick = (rowData: TData) => {\n    const projectId = (rowData as any).id;\n    setRowData(rowData);\n    router.push(`/projects/${projectId}`);\n  };\n\n  return (\n    <>\n      <Input\n        placeholder={`Search ${searchKey}...`}\n        value={(table.getColumn(searchKey)?.getFilterValue() as string) ?? ''}\n        onChange={(event) =>\n          table.getColumn(searchKey)?.setFilterValue(event.target.value)\n        }\n        className=\"w-full md:max-w-sm\"\n      />\n      <ScrollArea className=\"h-[calc(80vh-220px)] rounded-md border md:h-[calc(80dvh-200px)]\">\n        <Table className=\"relative\">\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && 'selected'}\n                  onClick={() => handleRowClick(row.original)} // Pass the row data\n                  className=\"cursor-pointer hover:bg-gray-100\" // Add hover effect\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <div className=\"flex-1 text-sm text-muted-foreground\">\n          {table.getFilteredSelectedRowModel().rows.length} of{' '}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n",
            "components\\ui\\dialog.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { Cross2Icon } from '@radix-ui/react-icons';\n\nimport { cn } from '@/lib/utils';\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      'fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full',\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <Cross2Icon className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col space-y-1.5 text-center sm:text-left',\n      className\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = 'DialogHeader';\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\n      className\n    )}\n    {...props}\n  />\n);\nDialogFooter.displayName = 'DialogFooter';\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      'text-lg font-semibold leading-none tracking-tight',\n      className\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription\n};\n",
            "components\\ui\\dropdown-menu.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport {\n  CheckIcon,\n  ChevronRightIcon,\n  DotFilledIcon\n} from '@radix-ui/react-icons';\n\nimport { cn } from '@/lib/utils';\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',\n      inset && 'pl-8',\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md',\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      inset && 'pl-8',\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <CheckIcon className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <DotFilledIcon className=\"h-4 w-4 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      'px-2 py-1.5 text-sm font-semibold',\n      inset && 'pl-8',\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}\n      {...props}\n    />\n  );\n};\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut';\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup\n};\n",
            "components\\ui\\form.tsx": "import * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { Slot } from '@radix-ui/react-slot';\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext\n} from 'react-hook-form';\n\nimport { cn } from '@/lib/utils';\nimport { Label } from '@/components/ui/label';\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>');\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n);\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        ref={ref}\n        className={cn('mb-2 space-y-2 lg:mb-0', className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  );\n});\nFormItem.displayName = 'FormItem';\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && 'text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n});\nFormLabel.displayName = 'FormLabel';\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n});\nFormControl.displayName = 'FormControl';\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn('text-[0.8rem] text-muted-foreground', className)}\n      {...props}\n    />\n  );\n});\nFormDescription.displayName = 'FormDescription';\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message) : children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn('text-[0.8rem] font-medium text-destructive', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n});\nFormMessage.displayName = 'FormMessage';\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField\n};\n",
            "components\\ui\\fullScreenLoader.tsx": "// components/ui/FullScreenLoader.tsx\n'use client';\n\nimport { useEffect } from 'react';\n\ninterface FullScreenLoaderProps {\n  message?: string;\n}\n\nexport default function FullScreenLoader({ message = 'Logging in...' }: FullScreenLoaderProps) {\n  useEffect(() => {\n    // Disable scrolling while loading screen is active\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = '';\n    };\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex flex-col items-center justify-center bg-black\">\n      <img\n        src=\"/loading.gif\"\n        alt=\"Loading\"\n        className=\"mb-4 h-32 w-32\"\n      />\n      <p className=\"text-white text-sm\">{message}</p>\n    </div>\n  );\n}\n",
            "components\\ui\\heading.tsx": "interface HeadingProps {\n  title: string;\n  description: string;\n}\n\nexport const Heading: React.FC<HeadingProps> = ({ title, description }) => {\n  return (\n    <div>\n      <h2 className=\"text-3xl font-bold tracking-tight\">{title}</h2>\n      <p className=\"text-sm text-muted-foreground\">{description}</p>\n    </div>\n  );\n};\n",
            "components\\ui\\input.tsx": "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = 'Input';\n\nexport { Input };\n",
            "components\\ui\\label.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst labelVariants = cva(\n  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'\n);\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n",
            "components\\ui\\modal.tsx": "'use client';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle\n} from '@/components/ui/dialog';\n\ninterface ModalProps {\n  title: string;\n  description: string;\n  isOpen: boolean;\n  onClose: () => void;\n  children?: React.ReactNode;\n}\n\nexport const Modal: React.FC<ModalProps> = ({\n  title,\n  description,\n  isOpen,\n  onClose,\n  children\n}) => {\n  const onChange = (open: boolean) => {\n    if (!open) {\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription>{description}</DialogDescription>\n        </DialogHeader>\n        <div>{children}</div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n",
            "components\\ui\\popover.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as PopoverPrimitive from '@radix-ui/react-popover';\n\nimport { cn } from '@/lib/utils';\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nexport { Popover, PopoverTrigger, PopoverContent };\n",
            "components\\ui\\scroll-area.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\nimport { cn } from '@/lib/utils';\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn('relative overflow-auto', className)} // Ensure overflow-auto\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = 'vertical', ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      'flex touch-none select-none transition-colors',\n      orientation === 'vertical' &&\n        'h-full w-2.5 border-l border-l-transparent p-[1px]',\n      orientation === 'horizontal' &&\n        'h-2.5 flex-col border-t border-t-transparent p-[1px]',\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n",
            "components\\ui\\select.tsx": "'use client';\n\nimport * as React from 'react';\nimport { CaretSortIcon, CheckIcon } from '@radix-ui/react-icons';\nimport * as SelectPrimitive from '@radix-ui/react-select';\n\nimport { cn } from '@/lib/utils';\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'flex h-9 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50',\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <CaretSortIcon className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = 'popper', ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        'relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        position === 'popper' &&\n          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectPrimitive.Viewport\n        className={cn(\n          'p-1',\n          position === 'popper' &&\n            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn('px-2 py-1.5 text-sm font-semibold', className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <CheckIcon className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator\n};\n",
            "components\\ui\\separator.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as SeparatorPrimitive from '@radix-ui/react-separator';\n\nimport { cn } from '@/lib/utils';\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = 'horizontal', decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        'shrink-0 bg-border',\n        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\n\nexport { Separator };\n",
            "components\\ui\\sheet.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as SheetPrimitive from '@radix-ui/react-dialog';\nimport { Cross2Icon } from '@radix-ui/react-icons';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst Sheet = SheetPrimitive.Root;\n\nconst SheetTrigger = SheetPrimitive.Trigger;\n\nconst SheetClose = SheetPrimitive.Close;\n\nconst SheetPortal = SheetPrimitive.Portal;\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\n\nconst sheetVariants = cva(\n  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\n  {\n    variants: {\n      side: {\n        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',\n        bottom:\n          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',\n        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',\n        right:\n          'inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm'\n      }\n    },\n    defaultVariants: {\n      side: 'right'\n    }\n  }\n);\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = 'right', className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <Cross2Icon className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n));\nSheetContent.displayName = SheetPrimitive.Content.displayName;\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col space-y-2 text-center sm:text-left',\n      className\n    )}\n    {...props}\n  />\n);\nSheetHeader.displayName = 'SheetHeader';\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\n      className\n    )}\n    {...props}\n  />\n);\nSheetFooter.displayName = 'SheetFooter';\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold text-foreground', className)}\n    {...props}\n  />\n));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription\n};\n",
            "components\\ui\\skeleton.tsx": "import { cn } from '@/lib/utils';\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn('animate-pulse rounded-md bg-primary/10', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n",
            "components\\ui\\slider.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as SliderPrimitive from '@radix-ui/react-slider';\n\nimport { cn } from '@/lib/utils';\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      'relative flex w-full touch-none select-none items-center',\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n));\nSlider.displayName = SliderPrimitive.Root.displayName;\n\nexport { Slider };\n",
            "components\\ui\\switch.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as SwitchPrimitives from '@radix-ui/react-switch';\n\nimport { cn } from '@/lib/utils';\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      'peer inline-flex h-[20px] w-[36px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        'pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0'\n      )}\n    />\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n",
            "components\\ui\\table.tsx": "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn('w-full caption-bottom text-sm', className)}\n      {...props}\n    />\n  </div>\n));\nTable.displayName = 'Table';\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />\n));\nTableHeader.displayName = 'TableHeader';\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn('[&_tr:last-child]:border-0', className)}\n    {...props}\n  />\n));\nTableBody.displayName = 'TableBody';\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn('bg-primary font-medium text-primary-foreground', className)}\n    {...props}\n  />\n));\nTableFooter.displayName = 'TableFooter';\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      'border-b transition-colors hover:bg-muted/50', // Removed checkbox-related styles\n      className\n    )}\n    {...props}\n  />\n));\nTableRow.displayName = 'TableRow';\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      'h-10 px-2 text-left align-middle font-medium text-muted-foreground', // Removed checkbox-related styles\n      className\n    )}\n    {...props}\n  />\n));\nTableHead.displayName = 'TableHead';\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      'p-2 align-middle', // Removed checkbox-related styles\n      className\n    )}\n    {...props}\n  />\n));\nTableCell.displayName = 'TableCell';\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn('mt-4 text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nTableCaption.displayName = 'TableCaption';\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption\n};\n",
            "components\\ui\\tabs.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\n\nimport { cn } from '@/lib/utils';\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      'inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground',\n      className\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow',\n      className\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n      className\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n",
            "components\\ui\\textarea.tsx": "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport { Textarea };\n",
            "components\\ui\\toast.tsx": "import * as React from 'react';\nimport { Cross2Icon } from '@radix-ui/react-icons';\nimport * as ToastPrimitives from '@radix-ui/react-toast';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n      className\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        default: 'border bg-background text-foreground',\n        destructive:\n          'destructive group border-destructive bg-destructive text-destructive-foreground'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\n      className\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      'absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <Cross2Icon className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn('text-sm font-semibold [&+div]:text-xs', className)}\n    {...props}\n  />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn('text-sm opacity-90', className)}\n    {...props}\n  />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction\n};\n",
            "components\\ui\\toaster.tsx": "'use client';\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport\n} from '@/components/ui/toast';\nimport { useToast } from '@/components/ui/use-toast';\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n",
            "components\\ui\\tooltip.tsx": "'use client';\n\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\n\nimport { cn } from '@/lib/utils';\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst Tooltip = TooltipPrimitive.Root;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      'z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n      className\n    )}\n    {...props}\n  />\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
            "components\\ui\\use-toast.ts": "// Inspired by react-hot-toast library\nimport * as React from 'react';\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST'\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST'];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType['UPDATE_TOAST'];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType['DISMISS_TOAST'];\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: ActionType['REMOVE_TOAST'];\n      toastId?: ToasterToast['id'];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT)\n      };\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        )\n      };\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false\n              }\n            : t\n        )\n      };\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: []\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId)\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id }\n    });\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      }\n    }\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId })\n  };\n}\n\nexport { useToast, toast };\n",
            "constants\\data.ts": "import { NavItem } from '@/types';\n\nexport type Project = {\n  id: number;\n  name: string;\n  description: string;\n};\n\nexport const navItems: NavItem[] = [\n  {\n    title: 'Dashboard',\n    href: '/dashboard',\n    icon: 'dashboard',\n    label: 'Dashboard'\n  },\n  {\n    title: 'Projects',\n    href: '/projects',\n    icon: 'Code',\n    label: 'projects'\n  },\n  {\n    title: 'Profile',\n    href: '/dashboard/profile',\n    icon: 'profile',\n    label: 'profile'\n  },\n  {\n    title: 'Logout',\n    href: '/',\n    icon: 'login',\n    label: 'login'\n  }\n];\n",
            "context\\RowDataContext.tsx": "'use client';\n\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface RowDataContextType {\n  rowData: any;\n  setRowData: (data: any) => void;\n}\n\nconst RowDataContext = createContext<RowDataContextType | undefined>(undefined);\n\nexport function RowDataProvider({ children }: { children: ReactNode }) {\n  const [rowData, setRowData] = useState<any>(null);\n\n  return (\n    <RowDataContext.Provider value={{ rowData, setRowData }}>\n      {children}\n    </RowDataContext.Provider>\n  );\n}\n\nexport function useRowData() {\n  const context = useContext(RowDataContext);\n  if (context === undefined) {\n    throw new Error('useRowData must be used within a RowDataProvider');\n  }\n  return context;\n}",
            "hooks\\useMultistepForm.tsx": "import { ReactElement, useCallback, useState } from 'react';\n\nexport default function useMultistepForm(steps: ReactElement[]) {\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n\n  const next = useCallback(() => {\n    setCurrentStepIndex((i) => Math.min(i + 1, steps.length - 1));\n  }, [steps.length]);\n\n  const back = useCallback(() => {\n    setCurrentStepIndex((i) => Math.max(i - 1, 0));\n  }, []);\n\n  const goTo = useCallback((index: number) => {\n    setCurrentStepIndex(index);\n  }, []);\n\n  return {\n    currentStepIndex,\n    step: steps[currentStepIndex],\n    steps,\n    isFirstStep: currentStepIndex === 0,\n    isLastStep: currentStepIndex === steps.length - 1,\n    goTo,\n    next,\n    back\n  };\n}\n",
            "hooks\\useSidebar.tsx": "import { create } from 'zustand';\n\ninterface SidebarStore {\n  isMinimized: boolean;\n  toggle: () => void;\n}\n\nexport const useSidebar = create<SidebarStore>((set) => ({\n  isMinimized: false,\n  toggle: () => set((state) => ({ isMinimized: !state.isMinimized }))\n}));\n",
            "lib\\form-schema.ts": "import * as z from 'zod';\n\nexport const profileSchema = z.object({\n  firstname: z\n    .string()\n    .min(3, { message: 'Product Name must be at least 3 characters' }),\n  lastname: z\n    .string()\n    .min(3, { message: 'Product Name must be at least 3 characters' }),\n  email: z\n    .string()\n    .email({ message: 'Product Name must be at least 3 characters' }),\n  contactno: z.coerce.number(),\n  country: z.string().min(1, { message: 'Please select a category' }),\n  city: z.string().min(1, { message: 'Please select a category' }),\n  // jobs array is for the dynamic fields\n  jobs: z.array(\n    z.object({\n      jobcountry: z.string().min(1, { message: 'Please select a category' }),\n      jobcity: z.string().min(1, { message: 'Please select a category' }),\n      jobtitle: z\n        .string()\n        .min(3, { message: 'Product Name must be at least 3 characters' }),\n      employer: z\n        .string()\n        .min(3, { message: 'Product Name must be at least 3 characters' }),\n      startdate: z\n        .string()\n        .refine((value) => /^\\d{4}-\\d{2}-\\d{2}$/.test(value), {\n          message: 'Start date should be in the format YYYY-MM-DD'\n        }),\n      enddate: z.string().refine((value) => /^\\d{4}-\\d{2}-\\d{2}$/.test(value), {\n        message: 'End date should be in the format YYYY-MM-DD'\n      })\n    })\n  )\n});\n\nexport type ProfileFormValues = z.infer<typeof profileSchema>;\n",
            "lib\\store.ts": "import { create } from 'zustand';\nimport { v4 as uuid } from 'uuid';\nimport { persist } from 'zustand/middleware';\nimport { Column } from '@/components/kanban/board-column';\nimport { UniqueIdentifier } from '@dnd-kit/core';\n\nexport type Status = 'TODO' | 'IN_PROGRESS' | 'DONE';\n\nconst defaultCols = [\n  {\n    id: 'TODO' as const,\n    title: 'Todo'\n  }\n] satisfies Column[];\n\nexport type ColumnId = (typeof defaultCols)[number]['id'];\n\nexport type Task = {\n  id: string;\n  title: string;\n  description?: string;\n  status: Status;\n};\n\nexport type State = {\n  tasks: Task[];\n  columns: Column[];\n  draggedTask: string | null;\n};\n\nconst initialTasks: Task[] = [\n  {\n    id: 'task1',\n    status: 'TODO',\n    title: 'Project initiation and planning'\n  },\n  {\n    id: 'task2',\n    status: 'TODO',\n    title: 'Gather requirements from stakeholders'\n  }\n];\n\nexport type Actions = {\n  addTask: (title: string, description?: string) => void;\n  addCol: (title: string) => void;\n  dragTask: (id: string | null) => void;\n  removeTask: (title: string) => void;\n  removeCol: (id: UniqueIdentifier) => void;\n  setTasks: (updatedTask: Task[]) => void;\n  setCols: (cols: Column[]) => void;\n  updateCol: (id: UniqueIdentifier, newName: string) => void;\n};\n\nexport const useTaskStore = create<State & Actions>()(\n  persist(\n    (set) => ({\n      tasks: initialTasks,\n      columns: defaultCols,\n      draggedTask: null,\n      addTask: (title: string, description?: string) =>\n        set((state) => ({\n          tasks: [\n            ...state.tasks,\n            { id: uuid(), title, description, status: 'TODO' }\n          ]\n        })),\n      updateCol: (id: UniqueIdentifier, newName: string) =>\n        set((state) => ({\n          columns: state.columns.map((col) =>\n            col.id === id ? { ...col, title: newName } : col\n          )\n        })),\n      addCol: (title: string) =>\n        set((state) => ({\n          columns: [\n            ...state.columns,\n            { title, id: state.columns.length ? title.toUpperCase() : 'TODO' }\n          ]\n        })),\n      dragTask: (id: string | null) => set({ draggedTask: id }),\n      removeTask: (id: string) =>\n        set((state) => ({\n          tasks: state.tasks.filter((task) => task.id !== id)\n        })),\n      removeCol: (id: UniqueIdentifier) =>\n        set((state) => ({\n          columns: state.columns.filter((col) => col.id !== id)\n        })),\n      setTasks: (newTasks: Task[]) => set({ tasks: newTasks }),\n      setCols: (newCols: Column[]) => set({ columns: newCols })\n    }),\n    { name: 'task-store', skipHydration: true }\n  )\n);\n",
            "lib\\utils.ts": "import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport { Active, DataRef, Over } from '@dnd-kit/core';\nimport { ColumnDragData } from '@/components/kanban/board-column';\nimport { TaskDragData } from '@/components/kanban/task-card';\n\ntype DraggableData = ColumnDragData | TaskDragData;\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function hasDraggableData<T extends Active | Over>(\n  entry: T | null | undefined\n): entry is T & {\n  data: DataRef<DraggableData>;\n} {\n  if (!entry) {\n    return false;\n  }\n\n  const data = entry.data.current;\n\n  if (data?.type === 'Column' || data?.type === 'Task') {\n    return true;\n  }\n\n  return false;\n}\n",
            "public\\next.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 394 80\"><path fill=\"#000\" d=\"M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z\"/><path fill=\"#000\" d=\"M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z\"/></svg>",
            "public\\vercel.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 283 64\"><path fill=\"black\" d=\"M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z\"/></svg>",
            "public\\markdownTest\\build_and_deployment.md": "# Build and Deployment Process\n\n## Build Tools\n\nThis project uses **npm** as the build tool. \n\n## Deployment Pipeline\n\nThis project is designed to be deployed on **Vercel**. Vercel provides a seamless CI/CD pipeline for Next.js applications.\n\n## Getting Started\n\n1. **Clone the repository:**\n\n   ```bash\n   git clone https://github.com/Kiranism/next-shadcn-dashboard-starter.git\n   ```\n\n2. **Install dependencies:**\n\n   ```bash\n   npm install\n   ```\n\n3. **Create a `.env.local` file:**\n\n   ```bash\n   cp env.example.txt .env.local\n   ```\n\n4. **Add environment variables:**\n\n   Open the `.env.local` file and add the necessary environment variables. Refer to the comments within the file for guidance.\n\n5. **Start the development server:**\n\n   ```bash\n   npm run dev\n   ```\n\nThe application should now be accessible at `http://localhost:3000`.\n",
            "public\\markdownTest\\code_structure.md": "Here's your formatted text:\n\nCode Structure\nDirectory Layout\nExamine the directory structure to understand where different types of files and modules are located.\n\ncss\nCopy code\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 dashboard\n\u2502   \u2502   \u251c\u2500\u2500 kanban\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2502   \u251c\u2500\u2500 employee\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 [employeeId]\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2502   \u251c\u2500\u2500 user\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 [userId]\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2502   \u251c\u2500\u2500 profile\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u251c\u2500\u2500 (auth)\n\u2502   \u2502   \u2514\u2500\u2500 (signin)\n\u2502   \u2502       \u2514\u2500\u2500 page.tsx\n\u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u251c\u2500\u2500 uploadthing\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 route.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 core.ts\n\u2502   \u2502   \u2514\u2500\u2500 auth\n\u2502   \u2502       \u2514\u2500\u2500 [...nextauth]\n\u2502   \u2502           \u2514\u2500\u2500 route.ts\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u251c\u2500\u2500 globals.css\n\u2502   \u251c\u2500\u2500 layout.tsx\n\u2502   \u2514\u2500\u2500 not-found.tsx\n\u251c\u2500\u2500 components\n\u2502   \u251c\u2500\u2500 kanban\n\u2502   \u2502   \u251c\u2500\u2500 new-task-dialog.tsx\n\u2502   \u2502   \u251c\u2500\u2500 new-section-dialog.tsx\n\u2502   \u2502   \u251c\u2500\u2500 column-action.tsx\n\u2502   \u2502   \u251c\u2500\u2500 task-card.tsx\n\u2502   \u2502   \u2514\u2500\u2500 board-column.tsx\n\u2502   \u251c\u2500\u2500 layout\n\u2502   \u2502   \u251c\u2500\u2500 ThemeToggle\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 theme-provider.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 theme-toggle.tsx\n\u2502   \u2502   \u251c\u2500\u2500 user-nav.tsx\n\u2502   \u2502   \u251c\u2500\u2500 sidebar.tsx\n\u2502   \u2502   \u251c\u2500\u2500 sidebar-old.tsx\n\u2502   \u2502   \u251c\u2500\u2500 providers.tsx\n\u2502   \u2502   \u251c\u2500\u2500 page-container.tsx\n\u2502   \u2502   \u251c\u2500\u2500 mobile-sidebar.tsx\n\u2502   \u2502   \u2514\u2500\u2500 header.tsx\n\u2502   \u251c\u2500\u2500 modal\n\u2502   \u2502   \u2514\u2500\u2500 alert-modal.tsx\n\u2502   \u251c\u2500\u2500 tables\n\u2502   \u2502   \u251c\u2500\u2500 user-tables\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 columns.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 client.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 cell-action.tsx\n\u2502   \u2502   \u2514\u2500\u2500 employee-tables\n\u2502   \u2502       \u251c\u2500\u2500 employee-table.tsx\n\u2502   \u2502       \u251c\u2500\u2500 columns.tsx\n\u2502   \u2502       \u2514\u2500\u2500 cell-action.tsx\n\u2502   \u251c\u2500\u2500 ui\n\u2502   \u2502   \u251c\u2500\u2500 use-toast.ts\n\u2502   \u2502   \u251c\u2500\u2500 tooltip.tsx\n\u2502   \u2502   \u251c\u2500\u2500 toaster.tsx\n\u2502   \u2502   \u251c\u2500\u2500 toast.tsx\n\u2502   \u2502   \u251c\u2500\u2500 textarea.tsx\n\u2502   \u2502   \u251c\u2500\u2500 tabs.tsx\n\u2502   \u2502   \u251c\u2500\u2500 table.tsx\n\u2502   \u2502   \u251c\u2500\u2500 switch.tsx\n\u2502   \u2502   \u251c\u2500\u2500 slider.tsx\n\u2502   \u2502   \u251c\u2500\u2500 skeleton.tsx\n\u2502   \u2502   \u251c\u2500\u2500 sheet.tsx\n\u2502   \u2502   \u251c\u2500\u2500 separator.tsx\n\u2502   \u2502   \u251c\u2500\u2500 select.tsx\n\u2502   \u2502   \u251c\u2500\u2500 scroll-area.tsx\n\u2502   \u2502   \u251c\u2500\u2500 popover.tsx\n\u2502   \u2502   \u251c\u2500\u2500 modal.tsx\n\u2502   \u2502   \u251c\u2500\u2500 label.tsx\n\u2502   \u2502   \u251c\u2500\u2500 input.tsx\n\u2502   \u2502   \u251c\u2500\u2500 heading.tsx\n\u2502   \u2502   \u251c\u2500\u2500 form.tsx\n\u2502   \u2502   \u251c\u2500\u2500 dropdown-menu.tsx\n\u2502   \u2502   \u251c\u2500\u2500 dialog.tsx\n\u2502   \u2502   \u251c\u2500\u2500 data-table.tsx\n\u2502   \u2502   \u251c\u2500\u2500 collapsible.tsx\n\u2502   \u2502   \u251c\u2500\u2500 checkbox.tsx\n\u2502   \u2502   \u251c\u2500\u2500 chart.tsx\n\u2502   \u2502   \u251c\u2500\u2500 calendar.tsx\n\u2502   \u2502   \u251c\u2500\u2500 button.tsx\n\u2502   \u2502   \u251c\u2500\u2500 breadcrumb.tsx\n\u2502   \u2502   \u251c\u2500\u2500 badge.tsx\n\u2502   \u2502   \u251c\u2500\u2500 avatar.tsx\n\u2502   \u2502   \u251c\u2500\u2500 alert.tsx\n\u2502   \u2502   \u2514\u2500\u2500 alert-dialog.tsx\n\u2502   \u251c\u2500\u2500 forms\n\u2502   \u2502   \u251c\u2500\u2500 user-profile-stepper\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 create-profile.tsx\n\u2502   \u2502   \u251c\u2500\u2500 user-auth-form.tsx\n\u2502   \u2502   \u251c\u2500\u2500 product-form.tsx\n\u2502   \u2502   \u2514\u2500\u2500 employee-form.tsx\n\u2502   \u251c\u2500\u2500 charts\n\u2502   \u2502   \u251c\u2500\u2500 pie-graph.tsx\n\u2502   \u2502   \u251c\u2500\u2500 bar-graph.tsx\n\u2502   \u2502   \u2514\u2500\u2500 area-graph.tsx\n\u2502   \u251c\u2500\u2500 recent-sales.tsx\n\u2502   \u251c\u2500\u2500 overview.tsx\n\u2502   \u251c\u2500\u2500 github-auth-button.tsx\n\u2502   \u251c\u2500\u2500 file-upload.tsx\n\u2502   \u251c\u2500\u2500 date-range-picker.tsx\n\u2502   \u2514\u2500\u2500 dashboard-nav.tsx\n\u251c\u2500\u2500 constants\n\u2502   \u2514\u2500\u2500 data.ts\n\u251c\u2500\u2500 hooks\n\u2502   \u251c\u2500\u2500 useSidebar.tsx\n\u2502   \u2514\u2500\u2500 useMultistepForm.tsx\n\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 utils.ts\n\u2502   \u251c\u2500\u2500 store.ts\n\u2502   \u2514\u2500\u2500 form-schema.ts\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 vercel.svg\n\u2502   \u2514\u2500\u2500 next.svg\n\u251c\u2500\u2500 types\n\u2502   \u251c\u2500\u2500 next-auth.d.ts\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 tailwind.config.js\n\u251c\u2500\u2500 postcss.config.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 next.config.js\n\u251c\u2500\u2500 middleware.ts\n\u251c\u2500\u2500 env.example.txt\n\u251c\u2500\u2500 components.json\n\u251c\u2500\u2500 auth.ts\n\u251c\u2500\u2500 auth.config.ts\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 .prettierrc\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .eslintrc.json\n\u2514\u2500\u2500 .husky\n    \u2514\u2500\u2500 pre-commit\napp: This directory contains the application's main layout, global styles, and page components.\ndashboard: This subdirectory houses the components and pages related to the dashboard.\n(auth): This subdirectory contains components and pages related to authentication.\napi: This subdirectory contains serverless functions and API routes.\nglobals.css: This file defines global styles for the application.\nlayout.tsx: This file defines the main layout of the application.\nnot-found.tsx: This file defines the 404 page.\ncomponents: This directory contains reusable UI components.\nkanban: This subdirectory contains components related to the kanban board.\nlayout: This subdirectory contains components related to the layout of the application.\nmodal: This subdirectory contains components related to modals.\ntables: This subdirectory contains components related to tables.\nui: This subdirectory contains basic UI components.\nforms: This subdirectory contains components related to forms.\ncharts: This subdirectory contains components related to charts.\nconstants: This directory contains constant values and data used in the application.\nhooks: This directory contains custom React hooks.\nlib: This directory contains utility functions and helpers.\npublic: This directory contains static assets that are publicly accessible.\ntypes: This directory contains TypeScript type definitions.\ntailwind.config.js: This file contains the configuration for Tailwind CSS.\npostcss.config.js: This file contains the configuration for PostCSS.\npackage.json: This file contains the project's dependencies and scripts.\npackage-lock.json: This file contains the exact versions of the project's dependencies.\nnext.config.js: This file contains the configuration for Next.js.\nmiddleware.ts: This file defines middleware functions for Next.js.\nenv.example.txt: This file is an example environment file.\ncomponents.json: This file contains the configuration for Shadcn UI.\nauth.ts: This file defines the authentication configuration.\nauth.config.ts: This file defines the authentication configuration.\nREADME.md: This file contains the project's documentation.\nLICENSE: This file contains the project's license.\n.prettierrc: This file contains the configuration for Prettier.\n.gitignore: This file specifies files and directories that should be ignored by Git.\n.eslintrc.json: This file contains the configuration for ESLint.\n.husky: This directory contains the configuration for Husky.\nThis directory structure provides a clear and organized way to manage the codebase, making it easy to find and maintain different parts of the application.",
            "public\\markdownTest\\components_and_modules.md": "# Components and Modules\n\n## Key Components and Modules\n\n### Core Modules\n\n*   **`app/layout.tsx`**: This is the root layout component for the application and defines the overall structure of the app. It includes providers for theme and session management.\n*   **`app/(auth)/(signin)/page.tsx`**: This component handles user authentication using `next-auth`. It provides both social logins (GitHub) and email login options.\n*   **`app/dashboard/layout.tsx`**: This layout component is specific to the dashboard section of the application. It includes the header and sidebar components.\n*   **`components/kanban/kanban-board.tsx`**: This component implements the Kanban board functionality using `dnd-kit` and `zustand` for state management.\n*   **`lib/store.ts`**: This module defines the `zustand` store used for managing the state of the Kanban board, including tasks and columns.\n\n### Dependencies\n\n*   **`next`**: The core Next.js framework.\n*   **`next-auth`**: Library for handling authentication.\n*   **`react-hook-form`**: Library for managing forms.\n*   **`zod`**: Library for schema validation.\n*   **`zustand`**: Library for state management.\n*   **`@dnd-kit/core`**: Library for drag-and-drop functionality.\n*   **`@uploadthing/react`**: Library for file uploading.\n*   **`@tanstack/react-table`**: Library for data tables.\n*   **`recharts`**: Library for charts.\n*   **`lucide-react`**: Library for icons.\n*   **`tailwind-merge`**: Library for merging Tailwind CSS classes.\n*   **`clsx`**: Library for conditionally applying CSS classes.\n\n",
            "public\\markdownTest\\general.md": "# General Information\n\n## Project Overview\n\nThis project is a Next.js 14 admin dashboard starter template built with the Next.js App Router and Shadcn-ui. It provides a basic dashboard with various features and functionalities, including authentication, data tables, forms, charts, and a Kanban board.\n\n## Main Objectives\n\nThe main objectives of this project are:\n\n- To provide a pre-built and customizable dashboard template for developers to quickly start building their own admin dashboards.\n- To showcase the use of modern web technologies such as Next.js 14, TypeScript, Tailwind CSS, and Shadcn-ui.\n- To demonstrate best practices for authentication, state management, data fetching, and UI component design.\n\n## Architecture\n\n### Main Components\n\nThe project is structured using the Next.js App Router and consists of the following main components:\n\n- **Pages:**\n    - `/`: Signup page with authentication using NextAuth.js (supports social and email logins).\n    - `/dashboard`: Main dashboard page with cards and charts for analytics.\n    - `/dashboard/user`: User management page with TanStack tables for displaying user details.\n    - `/dashboard/user/new`: User creation form with Uploadthing for file uploading.\n    - `/dashboard/employee`: Employee management page with TanStack tables and server-side functionalities.\n    - `/dashboard/profile`: User profile page with multi-step forms and form validation.\n    - `/dashboard/kanban`: Kanban board for task management using dnd-kit and Zustand.\n    - `/dashboard/notfound`: Not Found page.\n\n- **Components:**\n    - UI components from Shadcn-ui, providing a consistent and customizable design system.\n    - Custom components for specific functionalities, such as charts, forms, tables, and the Kanban board.\n\n- **API Routes:**\n    - `/api/auth/[...nextauth]`: API route for handling authentication with NextAuth.js.\n    - `/api/uploadthing`: API route for file uploading using Uploadthing.\n\n- **State Management:**\n    - Zustand is used for managing the state of the Kanban board.\n\n- **Data Fetching:**\n    - Data for the employee table is fetched from an external API.\n\n### Interaction\n\n- Pages are rendered using the Next.js App Router, providing server-side rendering and client-side navigation.\n- Authentication is handled by NextAuth.js, which integrates with the API routes.\n- UI components are used to build the user interface, and data is fetched and displayed using API routes and state management.\n- The Kanban board utilizes dnd-kit for drag-and-drop functionality and Zustand for persisting the state locally.\n\n## Important Things to Know\n\n- **Environment Variables:** The project requires environment variables for authentication and file uploading. Make sure to create a `.env.local` file and add the necessary variables.\n- **Dependencies:** The project uses various dependencies, including Next.js, TypeScript, Tailwind CSS, Shadcn-ui, Zod, Zustand, Auth.js, Uploadthing, TanStack Tables, and React Hook Form. Familiarize yourself with these technologies.\n- **Code Structure:** The project follows a structured code organization with separate folders for pages, components, API routes, and types. Adhere to the existing code structure when making changes.\n- **Styling:** Tailwind CSS is used for styling. Learn the basics of Tailwind CSS to customize the appearance of the dashboard.\n- **Authentication:** Authentication is implemented using NextAuth.js. Understand the authentication flow and how to protect routes.\n- **State Management:** The Kanban board uses Zustand for state management. Learn how to use Zustand to manage the state of your components.\n- **Data Fetching:** Data for the employee table is fetched from an external API. Understand how to fetch data from APIs and display it in the dashboard.\n",
            "server\\firebaseKey.json": "{\n    \"type\": \"service_account\",\n    \"project_id\": \"novacode-fd81a\",\n    \"private_key_id\": \"bae0e8b6d947cae70a686734b287e20769cfac40\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDBjzaddNYHnNH0\\nKDrGKA9TfbYFAbm5GhRtGPc1I6NOXsvn/wmMcYfbrdEdse+sRd12Svcz4Y2Z02Rh\\n/4LE/C98RDs8/azt2MWkY1HLhCp/R0a0a5HVVnno4SFIih3xMW3ZO6v378UghuJw\\nsxr2W8WqeCtmm/ugT/wrXcT5JvlAa91dgTCov6x/+rdBUtAIuNY0I9LNBX0aqE2v\\nTNdpeB0L/bRJFT61qQD/lavRhoKMZIoXY74inGFFnXory9qrnMcXvt2mJ7nmnVQe\\n9IHR04Kk1skMnb8/Jz0rBD1N5wF6mQfZ2eGtFx2lOOh7gAVrHH/0hEYEoeQ4tqOs\\nCX1lP1OxAgMBAAECggEACQTtLcL8iGom+SBhBTvng2uinjr7ak/4GtGQjt0GUnv9\\ntsWyPmVpqAuSWIayoSmYAUeq21O3uT7RwRSCtZ698HWeOEhGjSZ2RrPDU2c5IvlJ\\ndtWim/EZsQehCTgY3zTfPlGu0Ki/O/XXEjrxTyCdfkUXWiKbc/fYK3XlDFpT39vW\\nE8O7li30FbnjMcu1Fr2Z0E0Z7LEAwoRTKB/vyv4nS40nS5lBHiZmjmPHSQd31zeH\\npqWH9QRDoc3otT1lx4O9lu0bPAN76vBo3dwPqG6OBgpVUurLY8ylk+6YWJ6USEzA\\nVgxTD83P7kmDRloTBtUVLWZwX59MpTTkVtoS31n3wQKBgQDrUVNx3bXpRiJgjKb8\\n/msLTnO/UCmfokm4REXL2XvuxcyPRBA7D7+f0G6a+oe3oqyHvqeHT3oFK43teHab\\nY04MapGJ+AFTycmxLWqoWmQUwEJK758KgDnlAUJavKmj8nFCojOLF/HXstJlus2u\\nbAKhg82HyyucXiIQj41LL9OfQQKBgQDSklJxlpAKb0Xny1RCHm7r8zUMNOmzevi4\\nqYUZtEGhZEveIDEjPSo7EzLkXQXbD5Qm0ZTSPasa2bPMCtOaYZXzEGo4i8xXFQTR\\noThS3Oiv9Vj1cdjIuIg0KCvKetJQCkmdnTzhvVDYT3IRnXF16/aHVmW1kbRVhy1f\\nDGBN0NwIcQKBgFIWprNcEm90Bd4EcuRipFjnXz1n631CkdD0EB0Sm0cqPTflGHxh\\n/Aj2Hv91Ug7fcqxP+AUd1oUjMnmawlVmiP2P14F3wI7IH9Hs8/4SukL65qVZffOd\\n05RtogYhNlR46MXD65MkITuLqBXQ2pt0Fl7dqb8rQuVjeSKp0TJfVsWBAoGBAKsE\\n8faVDRmcdA8lIaKtqvLxTTVDyEbf6h+4doSA1QjqN4AJbz8qjyD5n8y/DGF1TqMU\\ndqUmNtCQ3akrZd6twSZvP4X7bJORW5+SK/eIuWcngf+eXi3vSZfqxF4n0KX3JQDg\\n0rCYnI+CPqe10o+ufERA1ExaMTeBmUTn/VNV/U7RAoGBAKSpUy1HI3XzLacgq773\\nNHeMlls9lY6zNriw8k3EpiUHftFkzIsPf7HLJUXxp+x5lNcSPfbSe6Cn0EUXsjy3\\nrieaEw5dJg4441A3QSHWsRzMgLaaI3PBVaISW2ra8fjx60jJWq+GBBwBktGoyUNN\\ny8HSa2yS11KXN9SMBHSSa+bH\\n-----END PRIVATE KEY-----\\n\",\n    \"client_email\": \"firebase-adminsdk-fzaon@novacode-fd81a.iam.gserviceaccount.com\",\n    \"client_id\": \"106738131442645004973\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fzaon%40novacode-fd81a.iam.gserviceaccount.com\",\n    \"universe_domain\": \"googleapis.com\"\n  }",
            "server\\gcloudKey.json": "{\n    \"type\": \"service_account\",\n    \"project_id\": \"novacode-432817\",\n    \"private_key_id\": \"84692d8dfa206a3be1b851448351b17f92a89df6\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCV+jWBuVdDaQFU\\nHDPYyvsAc6jpPvOei8R2jRyY1KLWlvtub544bUCHyqGFelysYjJIZDD6sUVknrGi\\nA4wnQ1hw3R0SwnB0WNxd6so+sZ0Qjf/xLqKuir9mF7fWo7HJ2cll1KE/LuVIXL3c\\n+gc0nF52cmR8h1bQq13zO39ijkdbKTzOE4XhRTkOj0fxbPAydkYN0pKqlpY55PcV\\ngWDY6zUFdsdXXr3uNGWWtChP+eS3KfMJNPBbpB7FKaLRDWAZITA36qDFey5hVZEG\\nqJRNn5G4P5FQQB720wlyvg7TjGidVf/LmH2bsimXZUMSoTrBAwHiSsfjBM80aviz\\nuMySkVQtAgMBAAECggEAERqR05OBgiyNfDwjJYwwh+Ko1sDZI7Go3CRHqJ5HW9Wo\\nIvYTwzeibloLhZ9oxjgEqADVHSHuWgVHGMTyzN9/TI/K6wLFtF8V8pf+LJww31xy\\nXd0FrIYiQdBepNnSQsTVlQlkwkHk4BXDiVnyTGuw0i1FjHYazn1cn4qfgmvbc2fZ\\nvUHcXoqlQVNaT50UZePbjNRcOzuF7CCv9Kh2yHpbumSE3D9P7rnSnJpQLmmvFXpR\\nI92M/s1yJZEhkfZXSJhfE7s3N8mcr/mqTfRsyk4pD+UFdJD+Lps9K2bWUgYZMV3m\\nq5kzPFeuOQB9lNhw/kFepYI2Fptv/ugjRSm+xzr6eQKBgQDR0mKH2EhQdxb+YEF2\\nvur9CkYadT0yziwopI5j9ICTEetlX9+f/JgF4tdi2TE5O+AxvpvcoO+nM4YK4AEf\\nVBkOPpnpwRXYTVRUNwCQy1HyzmqF4h0lsQ4QF9IAA+ApSb6QgO0NLy1SIAsUKZKV\\nDvq/FgFV13IP10ij+KdZ20oPIwKBgQC2/B24oGp0IrfNnCa/StgHbo4lVRMzV8Qs\\n3MKkoGvbz8ber8RMzKCBvA0bwR2QUGzO2VZBi+bI/FMhdeFlLoo7ulmWgwgV+O8B\\nf+R6M6C86pU4lqz747D6f29AuKQfSO+ZKjQCAske9g9+Zd75UKzp/I2Nazik10W9\\n1w0z7sZsbwKBgQC2krxNvDLgYV/OpG8SJnpPCFuLtiw0QxZFnzqPWzdtwY/0vAHY\\nMnEN3h7Q0nB0ftdMMbFpv1gJQ1oFqHkRi5npvSssLWkWt+MDDIEffOunvVkPensm\\nSvQTqMaAYN7yzkpVbvnWGRD0fxFkz+/OaCRjlYA/86I6ineYxkrIc3nzxQKBgCGQ\\nSw9TdVNKDvbK3pyV6NwsHiyg1z3CqnwkHhu+RSpziSHNka8YlZRWXv0pRffzmJG0\\nccriE3noNoNbsPUzPS3Jd6dQ74nAOG7I+6qij6g3SxmvIZmuYQcBmvF/LLOEWFZ6\\n1EFOK3/fWGYx311Ru/XLWleHREOQLP2uVYCiGolHAoGABJ8PezveEDGa0NReT9mE\\nxUcguM5OH70mX8saLwUPSwtI+a4pGD6b/SmwjUOMM+bjf2A00YoLPU5kHXjXtyxJ\\njxv6u1bVDl5UYm35wIQFx7kfQioOlp5Z1U/AzRjcfiq8o9/qjX866vgzzSnaraJf\\nQnbVnu9DzeMhN2gnGND7CCg=\\n-----END PRIVATE KEY-----\\n\",\n    \"client_email\": \"novacode@novacode-432817.iam.gserviceaccount.com\",\n    \"client_id\": \"112475073990952788593\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/novacode%40novacode-432817.iam.gserviceaccount.com\",\n    \"universe_domain\": \"googleapis.com\"\n  }",
            "server\\package.json": "{\n  \"name\": \"server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"node server.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@google-cloud/storage\": \"^7.12.1\",\n    \"@google-cloud/vertexai\": \"^1.5.0\",\n    \"axios\": \"^1.7.4\",\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.19.2\",\n    \"firebase-admin\": \"^12.4.0\",\n    \"formidable\": \"^3.5.1\",\n    \"multer\": \"^1.4.5-lts.1\"\n  }\n}\n",
            "server\\server.js": "process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\nconst express = require('express');\nconst multer = require('multer');\nconst { Storage } = require('@google-cloud/storage');\nconst cors = require('cors');\nconst admin = require('firebase-admin');\nconst { VertexAI } = require('@google-cloud/vertexai');\n\nconst app = express();\nconst port = 4000;\n\n// Initialize Google Cloud Storage\nconst storage = new Storage({\n  keyFilename: 'gcloudKey.json'\n});\nconst bucket = storage.bucket('novacode');\n\n// Initialize Firebase Admin SDK\nadmin.initializeApp({\n  credential: admin.credential.cert('firebaseKey.json')\n});\nconst db = admin.firestore();\n\n// Initialize Vertex AI\nconst vertex_ai = new VertexAI({ project: 'novacode-432817', location: 'us-central1' });\nconst model = 'gemini-1.5-flash-001';\nconst generativeModel = vertex_ai.preview.getGenerativeModel({\n  model: model,\n  generationConfig: {\n    'maxOutputTokens': 8192,\n    'temperature': 1,\n    'topP': 0.95,\n  },\n  safetySettings: [\n    {\n      'category': 'HARM_CATEGORY_HATE_SPEECH',\n      'threshold': 'BLOCK_MEDIUM_AND_ABOVE'\n    },\n    {\n      'category': 'HARM_CATEGORY_DANGEROUS_CONTENT',\n      'threshold': 'BLOCK_MEDIUM_AND_ABOVE'\n    },\n    {\n      'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n      'threshold': 'BLOCK_MEDIUM_AND_ABOVE'\n    },\n    {\n      'category': 'HARM_CATEGORY_HARASSMENT',\n      'threshold': 'BLOCK_MEDIUM_AND_ABOVE'\n    }\n  ],\n});\nconst chat = generativeModel.startChat({});\n\n// Configure multer\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10 MB limit\n});\n\napp.use(cors({\n  origin: 'http://localhost:3000',\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type'],\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/upload', upload.single('file'), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({ message: 'No file uploaded.' });\n    }\n\n    // Extract metadata from the request body\n    const { name, description, organization } = req.body;\n\n    // Add metadata to Firestore\n    const docRef = await db.collection('projects').add({\n      name,\n      description,\n      organization,\n      createdAt: admin.firestore.FieldValue.serverTimestamp()\n    });\n\n    const docId = docRef.id;\n    console.log('Document written with ID: ', docId);\n\n    // Create a file path within the folder named with the document ID\n    const filePath = `${docId}/${req.file.originalname}`;\n    const blob = bucket.file(filePath);\n    const blobStream = blob.createWriteStream();\n\n    blobStream.on('error', (err) => {\n      console.error('Error during file upload:', err);\n      return res.status(500).json({ message: 'Error uploading file.', error: err.message });\n    });\n\n    blobStream.on('finish', async () => {\n      const publicUrl = `https://storage.googleapis.com/${bucket.name}/${filePath}`;\n\n      try {\n        // Update Firestore with the file URL\n        await docRef.update({ fileUrl: publicUrl });\n\n        return res.status(200).json({ \n          message: 'File uploaded and project added successfully.',\n          url: publicUrl,\n          projectId: docId\n        });\n      } catch (firestoreError) {\n        console.error('Error updating document: ', firestoreError);\n        return res.status(500).json({ message: 'Error updating project in database.', error: firestoreError.message });\n      }\n    });\n\n    blobStream.end(req.file.buffer);\n  } catch (error) {\n    console.error('Unexpected error during file upload:', error);\n    return res.status(500).json({ message: 'Unexpected error occurred.', error: error.message });\n  }\n});\n\napp.get('/file/:projectId/:filename', async (req, res) => {\n  try {\n    const { projectId, filename } = req.params;\n    const filePath = `${projectId}/${filename}`;\n    const file = bucket.file(filePath);\n\n    const [fileExists] = await file.exists();\n    if (!fileExists) {\n      return res.status(404).json({ message: 'File not found' });\n    }\n\n    const [fileContents] = await file.download();\n    res.set('Content-Type', 'text/plain');\n    res.send(fileContents);\n  } catch (error) {\n    console.error('Error fetching file:', error);\n    res.status(500).json({ message: 'Error fetching file', error: error.message });\n  }\n});\n\napp.post('/chatInformation', async (req, res) => {\n  try {\n    const { message } = req.body;\n\n    if (!message || message.trim() === '') {\n      return res.status(400).json({ message: 'Message is required' });\n    }\n\n    // For now, just return a static response\n    res.status(200).json({ message: 'Example response' });\n  } catch (error) {\n    console.error('Error handling chat information:', error);\n    res.status(500).json({ message: 'Error processing request', error: error.message });\n  }\n});\n\napp.post('/test', async (req, res) => {\n  try {\n    const { message } = req.body;\n\n    if (!message || message.trim() === '') {\n      return res.status(400).json({ message: 'Message is required' });\n    }\n\n    // Send the message to the Vertex AI chat model\n    const streamResult = await chat.sendMessageStream(message);\n    const response = (await streamResult.response).candidates[0].content;\n\n    res.status(200).json({ message: response });\n  } catch (error) {\n    console.error('Error processing chat message:', error);\n    res.status(500).json({ message: 'Error processing request', error: error.message });\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n",
            "types\\index.ts": "import { Icons } from '@/components/icons';\n\nexport interface NavItem {\n  title: string;\n  href?: string;\n  disabled?: boolean;\n  external?: boolean;\n  icon?: keyof typeof Icons;\n  label?: string;\n  description?: string;\n}\n\nexport interface NavItemWithChildren extends NavItem {\n  items: NavItemWithChildren[];\n}\n\nexport interface NavItemWithOptionalChildren extends NavItem {\n  items?: NavItemWithChildren[];\n}\n\nexport interface FooterItem {\n  title: string;\n  items: {\n    title: string;\n    href: string;\n    external?: boolean;\n  }[];\n}\n\nexport type MainNavItem = NavItemWithOptionalChildren;\n\nexport type SidebarNavItem = NavItemWithChildren;\n",
            "types\\next-auth.d.ts": "import NextAuth, { DefaultSession } from 'next-auth';\n\ndeclare module 'next-auth' {\n  type UserSession = DefaultSession['user'];\n  interface Session {\n    user: UserSession;\n  }\n\n  interface CredentialsInputs {\n    email: string;\n    password: string;\n  }\n}\n"
        }
    },
    "Classes, Functions, and Imports": {},
    "Documentation and Comments": {}
}